---
AWSTemplateFormatVersion: '2010-09-09'
Description: |
 CloudFront Static Website with S3 origin
 * S3 bucket for website content
 * Access logs written to logs bucket
 * ACM Certificate for SSL
 * CloudFront distributions for website https access
 * Route 53 DNS entries
 * Build Users and policy
 * Cloudwatch alarms for CloudFront distribution 4xx and 5xx errors
 * SNS Topic for Cloudwatch Alarms

Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Hosted Zone Stack'
      Parameters:
      - HostedZoneStackName
    - Label:
        default: 'Website Parameters'
      Parameters:
      - DomainName
      - IndexPage
      - ErrorPage
    - Label:
        default: Cloudwatch Alarm Activity
      Parameters:
      - NotificationEmail
    - Label:
        default: 'CloudFront CDN'
      Parameters:
      - PriceClass
      - MinimumTTL
      - DefaultTTL
    - Label:
        default: 'PreExisting Resources To Use (Leave empty for stack to create and manage)'
      Parameters:
      - PreExistingLogsBucket
      - PreExistingSiteBucket

Parameters:
  HostedZoneStackName:
    Description: 'Name of an active CloudFormation stack that contains the hosted zone'
    Type: String
    Default: 'test-io'
    MinLength: 1
    MaxLength: 64
    ConstraintDescription: 'You must enter a hosted zone stack name.'
  DomainName:
    Description: 'The domain name, this will be the bucket name'
    Type: String
    Default: 'test.com'
    MinLength: 1
    MaxLength: 64
    ConstraintDescription: 'You must enter a domain name.'
  IndexPage:
    Description: 'The index page of the website. eg: index.html'
    Type: String
    Default: 'index.html'
    MinLength: 1
    MaxLength: 64
    ConstraintDescription: 'You must enter a index page.'
  ErrorPage:
    Description: 'The error page of the website. eg: error.html'
    Type: String
    Default: 'error.html'
    MinLength: 1
    MaxLength: 64
    ConstraintDescription: 'You must enter a error page.'
  # Email address to receive Git activity notifications: you@anotherdomain.com
  # CANNOT be in same domain!
  NotificationEmail:
    Type: String
    Description: "Initial email address to receive Cloudwatch alarm notifications"
    MinLength: 6
    AllowedPattern: ".+@[a-z0-9]+[-.a-z0-9]*(\\.[a-z][a-z]+)+"
    ConstraintDescription: "Provide a valid email address"
  DefaultTTL:
    Type: Number
    Description: "TTL in seconds"
    Default: 86400
  MinimumTTL:
    Description: "Minimum cache lifetime in seconds for the CloudFront distribution"
    Default: 43200
    Type: Number
  PriceClass:
    Description: "Distribution price class. Default is US-only, PriceClass_All is worldwide but more expensive."
    Default: PriceClass_100
    AllowedValues:
    - PriceClass_100
    - PriceClass_200
    - PriceClass_All
    Type: String
  PreExistingSiteBucket:
    Description: "Optional name of pre-existing website bucket. Leave empty to have website bucket created and managed by this stack."
    Type: String
    Default: ""
  PreExistingLogsBucket:
    Description: "Optional name of pre-existing access logs bucket. Leave empty to have access logs bucket created and managed by this stack."
    Type: String
    Default: ""
Conditions:
  NeedsNewSiteBucket: !Equals [!Ref PreExistingSiteBucket, ""]
  NeedsNewLogsBucket: !Equals [!Ref PreExistingLogsBucket, ""]
Resources:
  # Bucket for CloudFront and S3 access logs: logs.test.com
  LogsBucket:
    Condition: NeedsNewLogsBucket
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "logs.${DomainName}"
      AccessControl: LogDeliveryWrite
    DeletionPolicy: Retain

  # Bucket for website content: test.com
  WebsiteBucket:
    Condition: NeedsNewSiteBucket
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: PublicRead
      # This could fail if the bucket name exists else where.
      BucketName: !Ref DomainName
      WebsiteConfiguration:
        IndexDocument: !Ref IndexPage
        ErrorDocument: !Ref ErrorPage
      LoggingConfiguration:
        DestinationBucketName: !If [NeedsNewLogsBucket, !Ref LogsBucket, !Ref PreExistingLogsBucket]
        LogFilePrefix: !Sub "logs/s3/${DomainName}/"
    # Retain the website bucket when the stack is deleted
    DeletionPolicy: Retain

  # Build user for the stack
  BuildUser:
    Type: 'AWS::IAM::User'

  # IAM Policy for Build User
  BuildUserPolicy:
    Type: 'AWS::IAM::Policy'
    DependsOn: BuildUser
    Properties:
      PolicyName: !Sub '${AWS::StackName}-BuildUser-Policy'
      Users:
      - !Ref BuildUser
      PolicyDocument:
        Statement:
        -
          Effect: 'Allow'
          Action:
          - 's3:ListAllMyBuckets'
          Resource: 'arn:aws:s3:::*'
        -
          Effect: 'Allow'
          Action:
          - 's3:CreateBucket'
          - 's3:PutObject'
          Resource:
          - !Join ["", ["arn:aws:s3:::", !If [NeedsNewSiteBucket, !Ref WebsiteBucket, !Ref PreExistingSiteBucket]]]
        -
          Effect: 'Allow'
          Action:
          - 's3:CreateBucket'
          - 's3:PutObject'
          Resource:
          - !Join ["", ["arn:aws:s3:::", !If [NeedsNewSiteBucket, !Ref WebsiteBucket, !Ref PreExistingSiteBucket], "/*"]]

  # AWS Access and Secret Keys
  BuildCredentials:
    Type: 'AWS::IAM::AccessKey'
    DependsOn: BuildUser
    Properties:
      UserName: !Ref BuildUser

  # Certificate for HTTPS accesss through CloudFront
  Certificate:
    Type: "AWS::CertificateManager::Certificate"
    Properties:
      DomainName: !Ref DomainName

  # CDN serves S3 content over HTTPS for example.com
  CloudFrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    DependsOn: Certificate
    Properties:
      DistributionConfig:
        Enabled: true
        Aliases:
        - !Ref DomainName
        DefaultRootObject: !Ref IndexPage
        PriceClass: !Ref PriceClass
        HttpVersion: http2
        Origins:
        -
          DomainName: !Join ["", [!Ref DomainName, ".", !FindInMap [RegionMap, !Ref "AWS::Region", websiteendpoint]]]
          Id: S3Origin
          CustomOriginConfig:
            HTTPPort: 80
            HTTPSPort: 443
            OriginProtocolPolicy: http-only
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          AllowedMethods:
          - GET
          - HEAD
          Compress: false
          DefaultTTL: !Ref DefaultTTL
          MinTTL: !Ref MinimumTTL
          ForwardedValues:
            QueryString: false
            Forward: none
          ViewerProtocolPolicy: redirect-to-https
        Logging:
          Bucket: !Join ['', [!If [NeedsNewLogsBucket, !Ref LogsBucket, !Ref PreExistingLogsBucket], '.s3.amazonaws.com']]
          Prefix: !Sub 'logs/cloudfront/${DomainName}/'
          IncludeCookies: false
        ViewerCertificate:
          AcmCertificateArn: !Ref Certificate
          SslSupportMethod: sni-only

  Route53RecordSetGroup:
    Type: "AWS::Route53::RecordSetGroup"
    DependsOn: CloudFrontDistribution
    Properties:
      HostedZoneId:
        'Fn::ImportValue': !Sub '${HostedZoneStackName}-HostedZoneId'
      RecordSets:
      - Name: !Sub "${DomainName}."
        Type: A
        AliasTarget:
          HostedZoneId: Z2FDTNDATAQYW2 # CloudFront
          DNSName: !GetAtt CloudFrontDistribution.DomainName

  # SNS topic for Cloudwatch Alarm activity. Email subscription
  NotificationTopic:
    Type: "AWS::SNS::Topic"
    DependsOn: CloudFrontDistribution
    Properties:
      DisplayName: !Sub "Activity in ${DomainName} CloudFront Distribution"
      Subscription:
      - Endpoint: !Ref NotificationEmail
        Protocol: email

  # CLoudfront 4XX Error Alarm
  CloudFront4XXAlarm:
    Type: "AWS::CloudWatch::Alarm"
    DependsOn:
    - NotificationTopic
    - CloudFrontDistribution
    Properties:
      AlarmActions:
      - Ref: NotificationTopic
      AlarmDescription: 'CloudFront 4XXs Error Rate'
      ComparisonOperator: 'GreaterThanThreshold'
      Namespace: 'AWS/CloudFront'
      MetricName: '4xxErrorRate'
      Statistic: 'Average'
      Unit: 'Percent'
      EvaluationPeriods: 1
      Period: 300
      Threshold: 20
      Dimensions:
      - Name: DistributionId
        Value:
          Ref: CloudFrontDistribution
      - Name: Region
        Value: Global

  # CLoudfront 5XX Error Alarm
  CloudFront5XXAlarm:
    Type: "AWS::CloudWatch::Alarm"
    DependsOn:
    - NotificationTopic
    - CloudFrontDistribution
    Properties:
      AlarmActions:
      - Ref: NotificationTopic
      AlarmDescription: 'CloudFront 5XXs Error Rate'
      ComparisonOperator: 'GreaterThanThreshold'
      Namespace: 'AWS/CloudFront'
      MetricName: '5xxErrorRate'
      Statistic: 'Average'
      Unit: 'Percent'
      EvaluationPeriods: 1
      Period: 60
      Threshold: 0
      Dimensions:
      - Name: DistributionId
        Value:
          Ref: CloudFrontDistribution
      - Name: Region
        Value: Global

Mappings:
  RegionMap:
    ap-northeast-1:
      S3hostedzoneID: "Z2M4EHUR26P7ZW"
      websiteendpoint: "s3-website-ap-northeast-1.amazonaws.com"
    ap-northeast-2:
      S3hostedzoneID: "Z3W03O7B5YMIYP"
      websiteendpoint: "s3-website.ap-northeast-2.amazonaws.com"
    ap-south-1:
      S3hostedzoneID: "Z11RGJOFQNVJUP"
      websiteendpoint: "s3-website.ap-south-1.amazonaws.com"
    ap-southeast-1:
      S3hostedzoneID: "Z3O0J2DXBE1FTB"
      websiteendpoint: "s3-website-ap-southeast-1.amazonaws.com"
    ap-southeast-2:
      S3hostedzoneID: "Z1WCIGYICN2BYD"
      websiteendpoint: "s3-website-ap-southeast-2.amazonaws.com"
    eu-central-1:
      S3hostedzoneID: "Z21DNDUVLTQW6Q"
      websiteendpoint: "s3-website.eu-central-1.amazonaws.com"
    eu-west-1:
      S3hostedzoneID: "Z1BKCTXD74EZPE"
      websiteendpoint: "s3-website-eu-west-1.amazonaws.com"
    eu-west-2:
      S3hostedzoneID: "Z3GKZC51ZF0DB4"
      websiteendpoint: "s3-website.eu-west-2.amazonaws.com"
    sa-east-1:
      S3hostedzoneID: "Z7KQH4QJS55SO"
      websiteendpoint: "s3-website-sa-east-1.amazonaws.com"
    us-east-1:
      S3hostedzoneID: "Z3AQBSTGFYJSTF"
      websiteendpoint: "s3-website-us-east-1.amazonaws.com"
    us-east-2:
      S3hostedzoneID: "Z2O1EMRO9K5GLX"
      websiteendpoint: "s3-website.us-east-2.amazonaws.com"
    us-west-1:
      S3hostedzoneID: "Z2F56UZL2M1ACD"
      websiteendpoint: "s3-website-us-west-1.amazonaws.com"
    us-west-2:
      S3hostedzoneID: "Z3BJ6K6RIION7M"
      websiteendpoint: "s3-website-us-west-2.amazonaws.com"
    ca-central-1:
      S3hostedzoneID: "Z1QDHH18159H29"
      websiteendpoint: "s3-website.ca-central-1.amazonaws.com"


# Outputs
Outputs:
  SiteBucket:
    Description: 'S3 Bucket with the website'
    Value: !If [NeedsNewSiteBucket, !Ref WebsiteBucket, !Ref PreExistingSiteBucket]
  LogsBucket:
    Description: S3 Bucket with access logs
    Value: !If [NeedsNewLogsBucket, !Ref LogsBucket, !Ref PreExistingLogsBucket]
  CloudFrontDomain:
    Description: CloudFront distribution domain name
    Value: !Ref CloudFrontDistribution
  UserNameBuildUser:
    Description: 'Name of the Build User'
    Value: !Ref BuildUser
  AccessKeyBuildUser:
    Description: 'The access key for the build user'
    Value: !Ref BuildCredentials
  SecretAccessKeyBuildUser:
    Description: 'The secret access key for build user'
    Value: !GetAtt BuildCredentials.SecretAccessKey
  SNSNotificationTopic:
    Description: 'The notification topic for cloudfront 4xx and 5xx errors'
    Value: !Ref NotificationTopic
