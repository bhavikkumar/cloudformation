---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Docker Swarm Worker Cluster based on Docker for AWS'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stacks'
      Parameters:
      - ParentVPCStack
      - ParentAlertStack
      - SwarmManagerStack
      - LogAggregatorDNS
    - Label:
        default: 'Docker Swarm Worker Parameters'
      Parameters:
      - WorkerInstanceType
      - DesiredWorkerClusterSize
      - MaxWorkerClusterSize
      - WorkerDiskSize
      - WorkerDiskType
    - Label:
        default: 'Consul Parameters'
      Parameters:
      - EncryptionToken
    # - Label:
    #     default: 'TLS Certificate Parameters'
    #   Parameters:
    #   - CertificateS3Bucket
    #   - CertificateFileName
    - Label:
        default: 'HA Proxy Parameters'
      Parameters:
      - HAProxyPassword

Parameters:
  ParentVPCStack:
    Description: 'Stack name of parent VPC stack based on vpc/vpc-*azs.yaml template.'
    Type: String
  ParentAlertStack:
    Description: 'Optional but recommended stack name of parent alert stack based on operations/alert.yaml template.'
    Type: String
  SwarmManagerStack:
    Description: 'The swarm manager stack which we will be joining the workers too.'
    Type: String
  LogAggregatorDNS:
    Description: 'The log aggregator DNS which was created using operations/fluentd-aggregator.yaml template'
    Type: String
  DesiredWorkerClusterSize:
    Description: The desired number of swarm worker nodes
    Default: 3
    Type: Number
    MaxValue: 20
  MaxWorkerClusterSize:
    Description: The maximum number of swarm worker nodes
    Default: 3
    Type: Number
    MaxValue: 20
  WorkerInstanceType:
    Description: Swarm worker EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m4.16xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.12xlarge
      - m5.24xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.18xlarge
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge
      - x1.16xlarge
      - x1.32xlarge
      - x1e.xlarge
      - x1e.2xlarge
      - x1e.4xlarge
      - x1e.8xlarge
      - x1e.16xlarge
      - x1e.32xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - h1.2xlarge
      - h1.4xlarge
      - h1.8xlarge
      - h1.16xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
      - f1.2xlarge
      - f1.16xlarge
      - g3.4xlarge
      - g3.8xlarge
      - g3.16xlarge
      - p2.xlarge
      - p2.8xlarge
      - p2.16xlarge
      - p3.2xlarge
      - p3.8xlarge
      - p3.16xlarge
  WorkerDiskSize:
    Description: Size of Manager's ephemeral storage volume in GiB
    Type: Number
    MinValue: 8
    Default: 20
    MaxValue: 1024
  WorkerDiskType:
    Description: Manager ephemeral storage volume type
    Type: String
    Default: gp2
    AllowedValues:
      - standard
      - gp2
  EncryptionToken:
    NoEcho: true
    Description: 'Secret key to use for encryption of Consul network traffic. This key must be 16-bytes that are Base64-encoded'
    Type: String
  # CertificateS3Bucket:
  #   Description: 'Secure S3 Bucket which contains the required certificates'
  #   Type: String
  # CertificateFileName:
  #   Description: 'Certificate file name, supported file extensions are tar, tar+gzip, tar+bz2 and zip.'
  #   Type: String
  HAProxyPassword:
    NoEcho: true
    Description: 'Password for HA Proxy Stats endpoint'
    Type: String

Conditions:
  HasAlertTopic: !Not [!Equals [!Ref ParentAlertStack, '']]

Resources:
  SwarmWorkerAsgNotification:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: 'Worker ASG Notifications'
      TopicName: 'SwarmWorkerNotifications'

  SwarmWorkerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
                - "autoscaling.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /

  WorkerDynamoDBPolicy:
    DependsOn:
      - SwarmWorkerRole
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "swarm-worker-dynamodb-policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "dynamodb:GetItem"
            Resource:
              Fn::ImportValue:
                !Sub "${SwarmManagerStack}-SwarmTableArn"
      Roles:
        - !Ref SwarmWorkerRole

  WorkerEC2Policy:
    DependsOn:
      - SwarmWorkerRole
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "swarm-worker-ec2-policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "ec2:CreateTags"
              - "ec2:DescribeTags"
              - "ec2:DescribeInstances"
            Resource: "*"
      Roles:
        - !Ref SwarmWorkerRole

  # CertificateBucketPolicy:
  #   DependsOn:
  #     - SwarmWorkerRole
  #   Type: AWS::IAM::Policy
  #   Properties:
  #     PolicyName: "swarm-worker-certificate-download-policy"
  #     PolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         -
  #           Effect: "Allow"
  #           Action:
  #             - "s3:GetObject"
  #           Resource: !Sub 'arn:aws:s3:::${CertificateS3Bucket}/*'
  #     Roles:
  #       - !Ref SwarmWorkerRole

  SwarmLifecycleQueuePolicy:
    DependsOn:
      - SwarmWorkerRole
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "swarm-sqs-policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "sqs:SendMessage"
              - "sqs:GetQueueUrl"
              - "sns:Publish"
            Resource:
              Fn::ImportValue:
                !Sub "${SwarmManagerStack}-SwarmLifecycleQueue"
      Roles:
        - !Ref SwarmWorkerRole

  SwarmWorkerInstanceProfile:
    DependsOn:
      - SwarmWorkerRole
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref SwarmWorkerRole

  SwarmWorkerLaunchConfiguration:
    Metadata:
      Comment: Update, Install Docker and initialise the swarm
      # AWS::CloudFormation::Authentication:
      #   rolebased:
      #     type: "S3"
      #     buckets:
      #       - !Ref CertificateS3Bucket
      #     roleName:
      #       Ref: SwarmWorkerRole
      AWS::CloudFormation::Init:
        configSets:
          full_install:
            - install_cfn
            - install_docker
            - setup_logging
            # - certificates
            - consul_config
            - haproxy_config
            - init_aws_swarm
            - swarm_node_healthcheck
          update_install:
            - install_cfn
            # - certificates
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.SwarmWorkerLaunchConfiguration.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource SwarmWorkerLaunchConfiguration -c update_install --region ${AWS::Region}
                runas=root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files: [/etc/cfn/cfn-hup.conf, /etc/cfn/hooks.d/cfn-auto-reloader.conf]
        install_docker:
          packages:
            yum:
              docker: []
          services:
            sysvinit:
              docker:
                enabled: 'true'
                ensureRunning: 'true'
        setup_logging:
          services:
            sysvinit:
              rsyslog:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - "/etc/rsyslog.d/10-ship-syslog.conf"
          files:
            /etc/rsyslog.d/10-ship-syslog.conf:
              content: |
                # ### begin forwarding rule ###
                # The statement between the begin ... end define a SINGLE forwarding
                # rule. They belong together, do NOT split them. If you create multiple
                # forwarding rules, duplicate the whole block!
                # Remote Logging (we use TCP for reliable delivery)
                #
                # An on-disk queue is created for this action. If the remote host is
                # down, messages are spooled to disk and sent when it is up again.
                $WorkDirectory /var/lib/rsyslog # where to place spool files
                $ActionQueueFileName fluentdq # unique name prefix for spool files
                $ActionQueueMaxDiskSpace 1g   # 1gb space limit (use as much as possible)
                $ActionQueueSaveOnShutdown on # save messages to disk on shutdown
                $ActionQueueType LinkedList   # run asynchronously
                $ActionResumeRetryCount -1    # infinite retries if host is down
                # remote host is: name/ip:port, e.g. 192.168.0.1:514, port optional
                *.* @@localhost:5140
                # ### end of the forwarding rule ###
            /etc/fluentd.conf:
              content: !Sub |
                <system>
                  log_level warn
                </system>
                <source>
                  @type  forward
                  @id    local_general_input
                  port  24224
                </source>
                <source>
                  @type syslog
                  @id local_syslog_input
                  port 5140
                  protocol_type tcp
                  tag rsyslog
                  <parse>
                    message_format auto
                  </parse>
                </source>
                <filter **>
                  @type record_transformer
                  <record>
                    host "#{Socket.gethostname}"
                  </record>
                </filter>
                <match **>
                  @type forward
                  send_timeout 60s
                  recover_wait 10s
                  hard_timeout 60s
                  <server>
                    host ${LogAggregatorDNS}
                    port 24224
                  </server>
                  <buffer>
                    @type file
                    path /fluentd/log/forward.buffer
                    flush_interval 10s
                    retry_wait 20s
                  </buffer>
                </match>
          commands:
            run_fluentd:
              command: "docker run -d -h `hostname` -p 24224:24224 -p 5140:5140 --restart=always -e FLUENTD_CONF=fluentd.conf -v /data:/fluentd/log -v /etc/fluentd.conf:/fluentd/etc/fluentd.conf bhavikk/fluentd-sumologic:latest"
              cwd: "~"
        # certificates:
        #   sources:
        #     /opt/certificates: !Join ['', [ 'https://', { "Ref" : "CertificateS3Bucket" }, '.s3.amazonaws.com/', { "Ref" : "CertificateFileName" } ] ]
        #   commands:
        #     config_file_permission:
        #       command: "chmod 400 /opt/certificates/*"
        consul_config:
          files:
            /opt/consul/config.json:
              content: !Sub |
                {
                  "advertise_addr" : "{{ GetInterfaceIP \"eth0\" }}",
                  "bind_addr": "{{ GetInterfaceIP \"eth0\" }}",
                  "client_addr": "0.0.0.0",
                  "data_dir": "/consul/data",
                  "datacenter": "${AWS::Region}",
                  "leave_on_terminate" : true,
                  "retry_join" : [
                    "consul.server"
                  ],
                  "server_name" : "agent.${AWS::Region}.consul",
                  "skip_leave_on_interrupt" : false,
                  "server" : false,
                  "ui" : false,
                  "disable_update_check": true,
                  "log_level": "warn",
                  "encrypt": "${EncryptionToken}"
                }
              mode: '000755'
              owner: root
              group: root
          commands:
            config_file_permission:
              command: "chmod 644 /opt/consul/config.json"
        haproxy_config:
          files:
            /opt/haproxy/haproxy.json:
              content:
                template {
                  source = "/tmp/haproxy.ctmpl"
                  destination = "/etc/haproxy/haproxy.cfg"
                  command = "/bin/sh -c 'haproxy -D -f /etc/haproxy/haproxy.cfg -p /run/haproxy-lb.pid -sf $(cat /run/haproxy-lb.pid)'"
                }
              mode: '000755'
              owner: root
              group: root
            /opt/haproxy/haproxy.ctmpl:
              content: !Sub |
                global
                    log 127.0.0.1   local0
                    log 127.0.0.1   local1 notice
                    debug
                    stats timeout 30s
                    maxconn 1024

                defaults
                    log global
                    option httplog
                    option dontlognull
                    mode http
                    timeout connect 5000
                    timeout client  50000
                    timeout server  50000

                frontend http-in
                    bind 0.0.0.0:80
                    monitor-uri /health{{ range $i, $service := services }}{{ range $tag := .Tags }}{{ if $tag | regexMatch "^version=.+" }}{{ $version := index (. | split "=") 1 }}{{ if $service.Tags | contains "edge" }}
                    # Edge for {{ $service.Name }}, Version: {{ $version }}
                    acl {{ $service.Name }}{{ $version }} path_beg /v{{ $version }}/{{ $service.Name }}
                    use_backend {{ $service.Name }}{{ $version }} if {{ $service.Name }}{{ $version }}
                    {{ end }}{{ end }}{{ end }}{{ end }}

                {{ range $i, $service := services }}{{ range $tag := .Tags }}{{ if $tag | regexMatch "^version=.+" }}{{ $version := index (. | split "=") 1 }}{{ if $service.Tags | contains "edge" }}
                # Backend for {{ $service.Name }}, Version: {{ $version }}
                backend {{ $service.Name }}{{ $version }}
                    mode http
                    balance roundrobin
                    option forwardfor
                    option httpchk GET /health
                    http-check expect ! rstatus ^5
                    default-server inter 2s fall 1 rise 2
                    reqrep ^([^\ ]*\ /)v{{ $version }}/{{ $service.Name }}[/]?(.*)     \1{{ $service.Name }}/\2{{range $c,$d:=service $service.Name}}{{ if $d.Tags | contains "edge" }}{{ if $d.Tags | contains (printf "%s%s" "version=" $version) }}
                    server {{.Address}} {{.Address}}:{{.Port}} check
                    {{ end }}{{ end }}{{ end }}{{ end }}{{ end }}{{ end }}{{ end }}

                listen stats
                    bind 0.0.0.0:1936
                    stats enable
                    stats uri /
                    stats hide-version
                    stats auth admin:${HAProxyPassword}
              mode: '000755'
              owner: root
              group: root
          commands:
            config_file_permission:
              command: "chmod 644 /opt/haproxy/haproxy.json"
            consul_template_file_permission:
              command: "chmod 644 /opt/haproxy/haproxy.ctmpl"
        init_aws_swarm:
          commands:
            docker_run:
              command: "docker run --log-driver=fluentd --restart=no -e DYNAMODB_TABLE=$DYNAMODB_TABLE -v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker bhavikk/init-aws-swarm:latest"
              env:
                DYNAMODB_TABLE: { "Fn::ImportValue" : { "Fn::Sub" : "${SwarmManagerStack}-SwarmTableName" } }
              cwd: "~"
        swarm_node_healthcheck:
          commands:
            docker_run:
              command: "docker run --log-driver=fluentd -d --name swarm-healthcheck --restart=always -p 44444:44444 -v /var/run/docker.sock:/var/run/docker.sock bhavikk/swarm-node-healthcheck:latest"
              cwd: "~"
    DependsOn:
      - SwarmWorkerInstanceProfile
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeSize: !Ref WorkerDiskSize
            VolumeType: !Ref WorkerDiskType
      ImageId: !FindInMap [AWSRegionArch2AMI, !Ref 'AWS::Region', !FindInMap [AWSInstanceType2Arch, !Ref 'WorkerInstanceType', Arch]]
      InstanceType: !Ref WorkerInstanceType
      IamInstanceProfile: !Ref SwarmWorkerInstanceProfile
      SecurityGroups:
        - 'Fn::ImportValue': !Sub '${SwarmManagerStack}-SwarmClusterSecurityGroup'
        - 'Fn::ImportValue': !Sub '${SwarmManagerStack}-ConsulClusterSecurityGroup'
        - 'Fn::ImportValue': !Sub '${SwarmManagerStack}-ConsulClusterSecurityGroup'
        - 'Fn::ImportValue': !Sub '${SwarmManagerStack}-ConsulClusterSecurityGroup'
        - 'Fn::ImportValue': !Sub '${SwarmManagerStack}-HAProxySecurityGroup'
        - 'Fn::ImportValue': !Sub '${SwarmManagerStack}-HAProxyStatsSecurityGroup'
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash -xe
            yum update -y
            yum install -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource SwarmWorkerLaunchConfiguration --configsets full_install --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource SwarmWorkerAutoScaleGroup --region ${AWS::Region}

  SwarmWorkerAutoScaleGroup:
    DependsOn:
      - SwarmWorkerAsgNotification
      - SwarmWorkerLaunchConfiguration
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
        Count: !Ref DesiredWorkerClusterSize
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: !Ref DesiredWorkerClusterSize
        PauseTime: PT10M
        WaitOnResourceSignals: true
    Properties:
      MinSize: !Ref DesiredWorkerClusterSize
      MaxSize: !Ref MaxWorkerClusterSize
      DesiredCapacity: !Ref DesiredWorkerClusterSize
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      LaunchConfigurationName: !Ref SwarmWorkerLaunchConfiguration
      MetricsCollection:
        - Granularity: 1Minute
      TargetGroupARNs:
        - 'Fn::ImportValue': !Sub '${SwarmManagerStack}-SwarmHealthCheckTargetGroup'
        - 'Fn::ImportValue': !Sub '${SwarmManagerStack}-ConsulTargetGroup'
        - 'Fn::ImportValue': !Sub '${SwarmManagerStack}-HAProxyHttpTargetGroup'
        - 'Fn::ImportValue': !Sub '${SwarmManagerStack}-HAProxyStatsTargetGroup'
      VPCZoneIdentifier:
        - !Select [0, !Split [",", "Fn::ImportValue": !Sub "${ParentVPCStack}-SubnetsPublic"] ]
        - !Select [1, !Split [",", "Fn::ImportValue": !Sub "${ParentVPCStack}-SubnetsPublic"] ]
        - !Select [2, !Split [",", "Fn::ImportValue": !Sub "${ParentVPCStack}-SubnetsPublic"] ]
      NotificationConfigurations:
      - TopicARN:
          !Ref SwarmWorkerAsgNotification
        NotificationTypes:
          - autoscaling:EC2_INSTANCE_LAUNCH
          - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
          - autoscaling:EC2_INSTANCE_TERMINATE
          - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
      Tags:
        -
          Key: swarm-node-type
          PropagateAtLaunch: true
          Value: worker

  SwarmWorkerLifecycleHook:
    DependsOn:
      - SwarmWorkerAutoScaleGroup
      - SwarmWorkerRole
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName: !Ref SwarmWorkerAutoScaleGroup
      DefaultResult: CONTINUE
      LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING
      NotificationTargetARN:
        Fn::ImportValue:
          !Sub "${SwarmManagerStack}-SwarmLifecycleQueue"
      RoleARN: !GetAtt SwarmWorkerRole.Arn

Mappings:
  # This list comes from https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes
  AWSInstanceType2Arch:
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
    t2.xlarge:
      Arch: HVM64
    t2.2xlarge:
      Arch: HVM64
    m4.large:
      Arch: HVM64
    m4.xlarge:
      Arch: HVM64
    m4.2xlarge:
      Arch: HVM64
    m4.4xlarge:
      Arch: HVM64
    m4.10xlarge:
      Arch: HVM64
    m5.large:
      Arch: HVM64
    m5.xlarge:
      Arch: HVM64
    m5.2xlarge:
      Arch: HVM64
    m5.4xlarge:
      Arch: HVM64
    m5.12xlarge:
      Arch: HVM64
    m5.24xlarge:
      Arch: HVM64
    c4.large:
      Arch: HVM64
    c4.xlarge:
      Arch: HVM64
    c4.2xlarge:
      Arch: HVM64
    c4.4xlarge:
      Arch: HVM64
    c4.8xlarge:
      Arch: HVM64
    c5.large:
      Arch: HVM64
    c5.xlarge:
      Arch: HVM64
    c5.2xlarge:
      Arch: HVM64
    c5.4xlarge:
      Arch: HVM64
    c5.9xlarge:
      Arch: HVM64
    c5.18xlarge:
      Arch: HVM64
    r4.large:
      Arch: HVM64
    r4.xlarge:
      Arch: HVM64
    r4.2xlarge:
      Arch: HVM64
    r4.4xlarge:
      Arch: HVM64
    r4.8xlarge:
      Arch: HVM64
    r4.16xlarge:
      Arch: HVM64
    x1.16xlarge:
      Arch: HVM64
    x1.32xlarge:
      Arch: HVM64
    x1e.xlarge:
      Arch: HVM64
    x1e.2xlarge:
      Arch: HVM64
    x1e.4xlarge:
      Arch: HVM64
    x1e.8xlarge:
      Arch: HVM64
    x1e.16xlarge:
      Arch: HVM64
    x1e.32xlarge:
      Arch: HVM64
    d2.xlarge:
      Arch: HVM64
    d2.2xlarge:
      Arch: HVM64
    d2.4xlarge:
      Arch: HVM64
    d2.8xlarge:
      Arch: HVM64
    h1.2xlarge:
      Arch: HVM64
    h1.4xlarge:
      Arch: HVM64
    h1.8xlarge:
      Arch: HVM64
    h1.16xlarge:
      Arch: HVM64
    i3.large:
      Arch: HVM64
    i3.xlarge:
      Arch: HVM64
    i3.2xlarge:
      Arch: HVM64
    i3.4xlarge:
      Arch: HVM64
    i3.8xlarge:
      Arch: HVM64
    i3.16xlarge:
      Arch: HVM64
    f1.2xlarge:
      Arch: HVM64
    f1.16xlarge:
      Arch: HVM64
    g3.4xlarge:
      Arch: HVM64
    g3.8xlarge:
      Arch: HVM64
    g3.16xlarge:
      Arch: HVM64
    p2.xlarge:
      Arch: HVM64
    p2.8xlarge:
      Arch: HVM64
    p2.16xlarge:
      Arch: HVM64
    p3.2xlarge:
      Arch: HVM64
    p3.8xlarge:
      Arch: HVM64
    p3.16xlarge:
      Arch: HVM64
  # This list comes from https://aws.amazon.com/amazon-linux-ami/
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-97785bed
      HVMG2: ami-0a6e3770
    us-east-2:
      HVM64: ami-f63b1193
      HVMG2: NOT_SUPPORTED
    us-west-2:
      HVM64: ami-f2d3638a
      HVMG2: ami-ee15a196
    us-west-1:
      HVM64: ami-824c4ee2
      HVMG2: ami-0da4a46d
    ca-central-1:
      HVM64: ami-a954d1cd
      HVMG2: NOT_SUPPORTED
    eu-west-1:
      HVM64: ami-d834aba1
      HVMG2: ami-af8013d6
    eu-west-2:
      HVM64: ami-403e2524
      HVMG2: NOT_SUPPORTED
    eu-west-3:
      HVM64: ami-8ee056f3
      HVMG2: NOT_SUPPORTED
    eu-central-1:
      HVM64: ami-5652ce39
      HVMG2: ami-1d58ca72
    ap-southeast-1:
      HVM64: ami-68097514
      HVMG2: ami-c06013bc
    ap-northeast-2:
      HVM64: ami-863090e8
      HVMG2: NOT_SUPPORTED
    ap-northeast-1:
      HVM64: ami-ceafcba8
      HVMG2: ami-edfd658b
    ap-southeast-2:
      HVM64: ami-942dd1f6
      HVMG2: ami-85ef12e7
    ap-south-1:
      HVM64: ami-531a4c3c
      HVMG2: ami-411e492e
    sa-east-1:
      HVM64: ami-84175ae8
      HVMG2: NOT_SUPPORTED
