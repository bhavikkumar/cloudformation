---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Docker Swarm Manager Cluster across 3 AZs based on Docker for AWS'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stacks'
      Parameters:
      - ParentNetworkStack
      - ParentAlertStack
      - ParentZoneStack
    - Label:
        default: 'Docker Swarm Manager Parameters'
      Parameters:
      - KeyName
      - ManagerInstanceType
      - ManagerClusterSize
      - ManagerDiskSize
      - ManagerDiskType
    - Label:
        default: 'Consul Parameters'
      Parameters:
      - EncryptionToken
    - Label:
        default: 'TLS Certificate Parameters'
      Parameters:
      - CertificateS3Bucket
      - CertificateFileName
      - LoadBalancerCertificateArn
    - Label:
        default: 'Docker Registry Parameters'
      Parameters:
      - RegistrySubDomainName
      - RegistryAuthSubDomainName
      - RegistrySecret
      - GitHubOrganisation
      - GitHubClientId
      - GitHubClientSecret

Parameters:
  ParentNetworkStack:
    Description: 'Stack name of parent VPC stack based on vpc/vpc-*azs.yaml template.'
    Type: String
  ParentAlertStack:
    Description: 'Stack name of parent alert stack based on operations/alert.yaml template.'
    Type: String
  ParentZoneStack:
    Description: 'Stack name of parent zone stack based on dns/route53-hosted-zone.yaml template.'
    Type: String
    Default: ''
  KeyName:
    Description: Amazon EC2 Key Pair
    Type: "AWS::EC2::KeyPair::KeyName"
  ManagerClusterSize:
    Description: The number of swarm manager nodes
    Default: 3
    Type: Number
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
  ManagerInstanceType:
    Description: Swarm manager EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
  ManagerDiskSize:
    Description: Size of Manager's ephemeral storage volume in GiB
    Type: Number
    MinValue: 8
    Default: 20
    MaxValue: 1024
  ManagerDiskType:
    Description: Manager ephemeral storage volume type
    Type: String
    Default: gp2
    AllowedValues:
      - standard
      - gp2
  EncryptionToken:
    NoEcho: true
    Description: 'Secret key to use for encryption of Consul network traffic. This key must be 16-bytes that are Base64-encoded'
    Type: String
  CertificateS3Bucket:
    Description: 'Secure S3 Bucket which contains the required certificates'
    Type: String
  CertificateFileName:
    Description: 'Certificate file name, supported file extensions are tar, tar+gzip, tar+bz2 and zip.'
    Type: String
  LoadBalancerCertificateArn:
    Description: 'Amazon Resource Name (ARN) of the certificate to associate with the load balancer.'
    Type: String
  RegistrySubDomainName:
    Description: 'Name that is used to create the DNS entry ${SubDomainName}.${HostedZoneName}'
    Type: String
    Default: ''
  RegistryAuthSubDomainName:
    Description: 'Name that is used to create the DNS entry ${SubDomainName}.${HostedZoneName}'
    Type: String
    Default: ''
  RegistrySecret:
    NoEcho: true
    Description: 'Secret is required when operating multiple registries behind a load balancer'
    Type: String
  GitHubOrganisation:
    Description: 'The GitHub organisation which will be used for authentication to the docker registry'
    Type: String
  GitHubClientId:
    Description: 'The GitHub Client Id as under OAuth Apps for the organisation'
    Type: String
  GitHubClientSecret:
    NoEcho: true
    Description: 'The GitHub Client Secret as under OAuth Apps for the organisation'
    Type: String

Conditions:
  HasKeyName: !Not [!Equals [!Ref KeyName, '']]
  HasAlertTopic: !Not [!Equals [!Ref ParentAlertStack, '']]

Resources:
  RegistryBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain

  SwarmManagerAsgNotification:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: 'Manager ASG Notifications'
      TopicName: 'SwarmManagerNotifications'

  SwarmManagerSSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH to the Docker Swarm Managers
      VpcId:
        'Fn::ImportValue': !Sub '${ParentNetworkStack}-VPC'
      SecurityGroupIngress:
      # Port 22 is temporary, we will never need it in the future.
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0

  SwarmClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Docker Swarm Mode Security Groups
      VpcId:
        'Fn::ImportValue': !Sub '${ParentNetworkStack}-VPC'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '2377'
        ToPort: '2377'
        CidrIp:
          'Fn::ImportValue': !Sub '${ParentNetworkStack}-CidrBlock'
      - IpProtocol: tcp
        FromPort: '7946'
        ToPort: '7946'
        CidrIp:
          'Fn::ImportValue': !Sub '${ParentNetworkStack}-CidrBlock'
      - IpProtocol: udp
        FromPort: '7946'
        ToPort: '7946'
        CidrIp:
          'Fn::ImportValue': !Sub '${ParentNetworkStack}-CidrBlock'
      - IpProtocol: tcp
        FromPort: '4789'
        ToPort: '4789'
        CidrIp:
          'Fn::ImportValue': !Sub '${ParentNetworkStack}-CidrBlock'
      - IpProtocol: udp
        FromPort: '4789'
        ToPort: '4789'
        CidrIp:
          'Fn::ImportValue': !Sub '${ParentNetworkStack}-CidrBlock'
      - IpProtocol: tcp
        FromPort: '44444'
        ToPort: '44444'
        CidrIp:
          'Fn::ImportValue': !Sub '${ParentNetworkStack}-CidrBlock'

  ConsulClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group to allow Consul ports
      VpcId:
        'Fn::ImportValue': !Sub '${ParentNetworkStack}-VPC'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '8300'
        ToPort: '8302'
        CidrIp:
          'Fn::ImportValue': !Sub '${ParentNetworkStack}-CidrBlock'
      - IpProtocol: tcp
        FromPort: '8500'
        ToPort: '8500'
        CidrIp:
          'Fn::ImportValue': !Sub '${ParentNetworkStack}-CidrBlock'
      - IpProtocol: tcp
        FromPort: '8600'
        ToPort: '8600'
        CidrIp:
          'Fn::ImportValue': !Sub '${ParentNetworkStack}-CidrBlock'

  VaultClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group to allow vault ports
      VpcId:
        'Fn::ImportValue': !Sub '${ParentNetworkStack}-VPC'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '8200'
        ToPort: '8200'
        CidrIp:
          'Fn::ImportValue': !Sub '${ParentNetworkStack}-CidrBlock'
      - IpProtocol: tcp
        FromPort: '8201'
        ToPort: '8201'
        CidrIp:
          'Fn::ImportValue': !Sub '${ParentNetworkStack}-CidrBlock'

  RegistrySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group to allow registry and registry auth
      VpcId:
        'Fn::ImportValue': !Sub '${ParentNetworkStack}-VPC'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '5000'
        ToPort: '5000'
        CidrIp:
          'Fn::ImportValue': !Sub '${ParentNetworkStack}-CidrBlock'
      - IpProtocol: tcp
        FromPort: '5001'
        ToPort: '5001'
        CidrIp:
          'Fn::ImportValue': !Sub '${ParentNetworkStack}-CidrBlock'

  InternalLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow traffic to the internal load balancer
      VpcId:
        'Fn::ImportValue': !Sub '${ParentNetworkStack}-VPC'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '8500'
        ToPort: '8500'
        CidrIp:
          'Fn::ImportValue': !Sub '${ParentNetworkStack}-CidrBlock'
      - IpProtocol: tcp
        FromPort: '8200'
        ToPort: '8200'
        CidrIp:
          'Fn::ImportValue': !Sub '${ParentNetworkStack}-CidrBlock'
      - IpProtocol: tcp
        FromPort: '8201'
        ToPort: '8201'
        CidrIp:
          'Fn::ImportValue': !Sub '${ParentNetworkStack}-CidrBlock'

  ExternalLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTPS traffic to the external load balancer
      VpcId:
        'Fn::ImportValue': !Sub '${ParentNetworkStack}-VPC'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: '0.0.0.0/0'

  SwarmDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: id
          AttributeType: S
      KeySchema:
        -
          AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: !Join ['-', [ !Ref "AWS::StackName", dockerswarm ] ]

  VaultDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: id
          AttributeType: S
      KeySchema:
        -
          AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: !Join ['-', [ !Ref "AWS::StackName", vault ] ]

  SwarmManagerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
                - "autoscaling.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /

  ManagerDynamoDBPolicy:
    DependsOn:
      - SwarmManagerRole
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "swarm-manager-dynamodb-policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "dynamodb:GetItem"
              - "dynamodb:UpdateItem"
              - "dynamodb:PutItem"
              - "dynamodb:DeleteItem"
            Resource: !GetAtt SwarmDynamoDBTable.Arn
      Roles:
        - !Ref SwarmManagerRole

  VaultDynamoDBPolicy:
    DependsOn:
      - SwarmManagerRole
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "vault-dynamodb-policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "dynamodb:GetItem"
              - "dynamodb:PutItem"
            Resource: !GetAtt VaultDynamoDBTable.Arn
      Roles:
        - !Ref SwarmManagerRole

  ManagerEC2Policy:
    DependsOn:
      - SwarmManagerRole
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "swarm-manager-ec2-policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "ec2:CreateTags"
              - "ec2:DescribeTags"
              - "ec2:DescribeInstances"
            Resource: "*"
      Roles:
        - !Ref SwarmManagerRole

  CertificateBucketPolicy:
    DependsOn:
      - SwarmManagerRole
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "swarm-manager-certificate-download-policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "s3:GetObject"
            Resource: !Sub 'arn:aws:s3:::${CertificateS3Bucket}/*'
      Roles:
        - !Ref SwarmManagerRole

  RegistryBucketPolicy:
    DependsOn:
      - SwarmManagerRole
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "allow-registry-to-use-s3"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Deny"
            Action:
              - "s3:PutObject"
            Resource: !Sub 'arn:aws:s3:::${RegistryBucket}/*'
            Condition:
              StringNotEquals:
                s3:x-amz-server-side-encryption:
                  - 'AES256'
          -
            Effect: "Deny"
            Action:
              - "s3:PutObject"
            Resource: !Sub 'arn:aws:s3:::${RegistryBucket}/*'
            Condition:
              'Null':
                s3:x-amz-server-side-encryption: true
          -
            Effect: "Allow"
            Action:
              - "s3:ListBucket"
              - "s3:GetBucketLocation"
              - "s3:ListBucketMultipartUploads"
            Resource: !Sub 'arn:aws:s3:::${RegistryBucket}'
          -
            Effect: "Allow"
            Action:
              - "s3:PutObject"
              - "s3:GetObject"
              - "s3:DeleteObject"
              - "s3:ListMultipartUploadParts"
              - "s3:AbortMultipartUpload"
            Resource: !Sub 'arn:aws:s3:::${RegistryBucket}/*'
      Roles:
        - !Ref SwarmManagerRole

  SwarmLifecycleQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 14400
      ReceiveMessageWaitTimeSeconds: 10

  SwarmLifecycleQueuePolicy:
    DependsOn:
      - SwarmLifecycleQueue
      - SwarmManagerRole
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "swarm-sqs-policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "sqs:DeleteMessage"
              - "sqs:ReceiveMessage"
              - "sqs:SendMessage"
              - "sqs:GetQueueUrl"
              - "sns:Publish"
            Resource: !GetAtt SwarmLifecycleQueue.Arn
      Roles:
        - !Ref SwarmManagerRole

  SwarmManagerInstanceProfile:
    DependsOn:
      - SwarmManagerRole
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref SwarmManagerRole

  # This is used to health check the swarm cluster. We don't actually
  # allow any traffic to hit this.
  SwarmHealthCheckTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /ishealthy
      HealthCheckPort: 44444
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '204'
      Name: !Join ['-', [ !Ref "AWS::StackName", NodeHealthCheck ] ]
      # This port should only be available internally.
      Port: 44444
      Protocol: HTTP
      UnhealthyThresholdCount: 4
      VpcId:
        'Fn::ImportValue': !Sub '${ParentNetworkStack}-VPC'

  ConsulTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /v1/health/service/consul
      HealthCheckPort: 8500
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'
      Name: !Join ['-', [ !Ref "AWS::StackName", ConsulCluster ] ]
      # This port should only be available internally.
      Port: 8500
      Protocol: HTTP
      UnhealthyThresholdCount: 4
      VpcId:
        'Fn::ImportValue': !Sub '${ParentNetworkStack}-VPC'

  VaultTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /v1/sys/health
      HealthCheckPort: 8200
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '200,429'
      Name: !Join ['-', [ !Ref "AWS::StackName", Vault ] ]
      # This port should only be available internally.
      Port: 8200
      Protocol: HTTP
      UnhealthyThresholdCount: 4
      VpcId:
        'Fn::ImportValue': !Sub '${ParentNetworkStack}-VPC'

  VaultClusterTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /v1/sys/health
      HealthCheckPort: 8200
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '200,429'
      Name: !Join ['-', [ !Ref "AWS::StackName", VaultCluster ] ]
      # This port should only be available internally.
      Port: 8201
      Protocol: HTTP
      UnhealthyThresholdCount: 4
      VpcId:
        'Fn::ImportValue': !Sub '${ParentNetworkStack}-VPC'

  RegistryTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /v2/
      HealthCheckPort: 5000
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '200,401'
      Name: !Join ['-', [ !Ref "AWS::StackName", Registry ] ]
      # This port should only be available internally.
      Port: 5000
      Protocol: HTTPS
      UnhealthyThresholdCount: 4
      VpcId:
        'Fn::ImportValue': !Sub '${ParentNetworkStack}-VPC'

  RegistryAuthTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckPort: 5001
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'
      Name: !Join ['-', [ !Ref "AWS::StackName", RegistryAuth ] ]
      # This port should only be available internally.
      Port: 5001
      Protocol: HTTPS
      UnhealthyThresholdCount: 4
      VpcId:
        'Fn::ImportValue': !Sub '${ParentNetworkStack}-VPC'

  ExternalLoadBalancer:
    DependsOn:
      - ExternalLoadBalancerSecurityGroup
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      SecurityGroups:
        - !Ref ExternalLoadBalancerSecurityGroup
      Subnets:
        - !Select [0, !Split [",", "Fn::ImportValue": !Sub "${ParentNetworkStack}-SubnetsPublic"] ]
        - !Select [1, !Split [",", "Fn::ImportValue": !Sub "${ParentNetworkStack}-SubnetsPublic"] ]
        - !Select [2, !Split [",", "Fn::ImportValue": !Sub "${ParentNetworkStack}-SubnetsPublic"] ]

  RegistryRecordSet:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId:
        'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneId'
      Comment: Zone alias targeted to External ALB
      RecordSets:
      - Name: !Ref RegistrySubDomainName
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt ExternalLoadBalancer.CanonicalHostedZoneID
          DNSName: !GetAtt ExternalLoadBalancer.DNSName

  RegistryAuthRecordSet:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId:
        'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneId'
      Comment: Zone alias targeted to External ALB
      RecordSets:
      - Name: !Ref RegistryAuthSubDomainName
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt ExternalLoadBalancer.CanonicalHostedZoneID
          DNSName: !GetAtt ExternalLoadBalancer.DNSName

  SwarmManagerLaunchConfiguration:
    Metadata:
      Comment: Update, Install Docker and initialise the swarm
      AWS::CloudFormation::Authentication:
        rolebased:
          type: "S3"
          buckets:
            - !Ref CertificateS3Bucket
          roleName:
            Ref: SwarmManagerRole
      AWS::CloudFormation::Init:
        configSets:
          full_install:
            - install_cfn
            - install_docker
            - init_aws_swarm
            - swarm_node_healthcheck
            - guide_aws_swarm
            - consul
            - vault
            - certificates
            - registry
            - registry_auth
          update_install:
            - install_cfn
            - certificates
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.SwarmManagerLaunchConfiguration.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource SwarmManagerLaunchConfiguration -c update_install --region ${AWS::Region}
                runas=root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files: [/etc/cfn/cfn-hup.conf, /etc/cfn/hooks.d/cfn-auto-reloader.conf]
        install_docker:
          packages:
            yum:
              docker: []
          services:
            sysvinit:
              docker:
                enabled: 'true'
                ensureRunning: 'true'
        init_aws_swarm:
          commands:
            docker_run:
              command: "docker run --restart=no -e DYNAMODB_TABLE=$DYNAMODB_TABLE -v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker depost/init-aws-swarm:latest"
              env:
                DYNAMODB_TABLE: { "Ref" : "SwarmDynamoDBTable" }
              cwd: "~"
        swarm_node_healthcheck:
          commands:
            docker_run:
              command: "docker run -d --name swarm-healthcheck --restart=always -p 44444:44444 -v /var/run/docker.sock:/var/run/docker.sock depost/swarm-node-healthcheck:latest"
              cwd: "~"
        guide_aws_swarm:
          commands:
            docker_run:
              command: "docker run -d --name guide-aws --restart=always -e DYNAMODB_TABLE=$DYNAMODB_TABLE -e LIFECYCLE_QUEUE=$LIFECYCLE_QUEUE -v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker depost/guide-aws-swarm:latest"
              env:
                DYNAMODB_TABLE: { "Ref" : "SwarmDynamoDBTable" }
                LIFECYCLE_QUEUE: { "Ref" : "SwarmLifecycleQueue" }
              cwd: "~"
        consul:
          files:
            /opt/consul/config.json:
              content: !Sub |
                {
                  "datacenter": "${AWS::Region}",
                  "log_level": "INFO",
                  "server": true,
                  "autopilot": {
                    "cleanup_dead_servers": true
                  },
                  "retry_join": ["provider=aws tag_key=swarm-node-type tag_value=manager"],
                  "bootstrap_expect": ${ManagerClusterSize},
                  "leave_on_terminate": true,
                  "raft_protocol": 3,
                  "client_addr": "0.0.0.0",
                  "encrypt": "${EncryptionToken}"
                }
              mode: '000755'
              owner: root
              group: root
          commands:
            config_file_permission:
              command: "chmod 644 /opt/consul/config.json"
            docker_run:
              command: "docker run -d --name consul --net=host --restart=always -e 'CONSUL_BIND_INTERFACE=eth0' -v /opt/consul:/consul/config consul agent -ui -server"
              cwd: "~"
        vault:
          files:
            /opt/vault/vault.hcl:
              content: !Sub |
                backend "consul" {
                  address = "127.0.0.1:8500"
                  path = "vault"
                  scheme="http"
                }
                listener "tcp" {
                  address = "0.0.0.0:8200"
                  tls_disable = 1
                }
              mode: '000755'
              owner: root
              group: root
          commands:
            config_file_permission:
              command: "chmod 644 /opt/vault/vault.hcl"
            docker_run:
              command: "docker run -d --name vault --net=host --restart=always -e 'VAULT_REDIRECT_INTERFACE=eth0' -e VAULT_CLUSTER_ADDR=$VAULT_CLUSTER_ADDR -v /opt/vault:/config --cap-add IPC_LOCK vault server -config=/config/vault.hcl"
              env:
                VAULT_CLUSTER_ADDR: { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : ["InternalLoadBalancer", "DNSName"] }, ":8201" ] ] }
              cwd: "~"
            init_vault:
              command: "docker run --restart=no -e DYNAMODB_TABLE=$DYNAMODB_TABLE -e 'VAULT_SCHEME=http' depost/init-vault:latest"
              env:
                DYNAMODB_TABLE: { "Ref" : "VaultDynamoDBTable" }
              cwd: "~"
        certificates:
          sources:
            /opt/certificates: !Join ['', [ 'https://', { "Ref" : "CertificateS3Bucket" }, '.s3.amazonaws.com/', { "Ref" : "CertificateFileName" } ] ]
          commands:
            config_file_permission:
              command: "chmod 400 /opt/certificates/*"
        registry:
          files:
            /opt/registry/config.yaml:
              content: !Sub |
                version: 0.1
                log:
                  level: debug
                  fields:
                    service: registry
                storage:
                  s3:
                    region: ${AWS::Region}
                    bucket: ${RegistryBucket}
                    encrypt: true
                  maintenance:
                    uploadpurging:
                      enabled: true
                      age: 168h
                      interval: 24h
                      dryrun: false
                auth:
                  token:
                    realm: https://${RegistryAuthSubDomainName}/auth
                    service: ${RegistrySubDomainName}
                    issuer: ${RegistrySubDomainName}
                    rootcertbundle: /opt/certificates/auth.crt
                http:
                  addr: :5000
                  secret: ${RegistrySecret}
                  tls:
                    certificate: /opt/certificates/fullchain.pem
                    key: /opt/certificates/privkey.pem
                  headers:
                    X-Content-Type-Options: [nosniff]
              mode: '000755'
              owner: root
              group: root
          commands:
            config_file_permission:
              command: "chmod 644 /opt/registry/config.yaml"
            docker_run:
              command: "docker run -d -p 5000:5000 --restart=always --name registry -v /opt/registry/config.yaml:/etc/docker/registry/config.yml:ro -v /opt/certificates:/opt/certificates:ro registry:2"
              cwd: "~"
        # This docker_auth is just for demo purposes. Production system should have one which supports clustering.
        registry_auth:
          files:
            /opt/registry/registry_auth.yaml:
              content: !Sub |
                server:
                  addr: ":5001"
                  certificate: "/data/sslcache/fullchain.pem"
                  key: "/data/sslcache/privkey.pem"
                token:  # Settings for the tokens.
                  issuer: ${RegistrySubDomainName}
                  expiration: 900
                  certificate: "/data/sslcache/auth.crt"
                  key: "/data/sslcache/auth.key"
                github_auth:
                  organization: "${GitHubOrganisation}"
                  client_id: "${GitHubClientId}"
                  client_secret: "${GitHubClientSecret}"
                  token_db: "/data/github_tokens.ldb"
                  http_timeout: "10s"
                  revalidate_after: "1h"
                acl:
                  - match: {account: "/.+/"}
                    actions: ["*"]
                    comment: "Logged in users can do anything."
                  # Access is denied by default.
              mode: '000755'
              owner: root
              group: root
          commands:
            config_file_permission:
              command: "chmod 644 /opt/registry/registry_auth.yaml"
            docker_run:
              command: "docker run -d --restart=always --name docker_auth -p 5001:5001 -v /opt/registry/registry_auth.yaml:/config/registry_auth.yaml:ro -v /opt/certificates:/data/sslcache cesanta/docker_auth:latest /config/registry_auth.yaml"
              cwd: "~"
    DependsOn:
      - SwarmManagerSSHSecurityGroup
      - SwarmDynamoDBTable
      - VaultDynamoDBTable
      - SwarmManagerInstanceProfile
      - SwarmClusterSecurityGroup
      - ConsulClusterSecurityGroup
      - VaultClusterSecurityGroup
      - RegistrySecurityGroup
      - RegistryBucket
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeSize: !Ref ManagerDiskSize
            VolumeType: !Ref ManagerDiskType
      ImageId: !FindInMap [AWSRegionArch2AMI, !Ref 'AWS::Region', !FindInMap [AWSInstanceType2Arch, !Ref 'ManagerInstanceType', Arch]]
      InstanceType: !Ref ManagerInstanceType
      IamInstanceProfile: !Ref SwarmManagerInstanceProfile
      KeyName: !If [HasKeyName, !Ref KeyName, !Ref 'AWS::NoValue']
      SecurityGroups:
        - !Ref SwarmManagerSSHSecurityGroup
        - !Ref SwarmClusterSecurityGroup
        - !Ref ConsulClusterSecurityGroup
        - !Ref VaultClusterSecurityGroup
        - !Ref RegistrySecurityGroup
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash -xe
            yum update -y
            yum install -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource SwarmManagerLaunchConfiguration --configsets full_install --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource SwarmManagerAutoScaleGroup --region ${AWS::Region}

  SwarmManagerAutoScaleGroup:
    DependsOn:
      - SwarmManagerAsgNotification
      - SwarmManagerLaunchConfiguration
      - SwarmHealthCheckTargetGroup
      - ConsulTargetGroup
      - VaultTargetGroup
      - VaultClusterTargetGroup
      - RegistryTargetGroup
      - RegistryAuthTargetGroup
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
        Count: !Ref ManagerClusterSize
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: !Ref ManagerClusterSize
        PauseTime: PT10M
        WaitOnResourceSignals: true
    Properties:
      MinSize: !Ref ManagerClusterSize
      MaxSize: 8
      DesiredCapacity: !Ref ManagerClusterSize
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      LaunchConfigurationName: !Ref SwarmManagerLaunchConfiguration
      MetricsCollection:
        - Granularity: 1Minute
      TargetGroupARNs:
        - !Ref SwarmHealthCheckTargetGroup
        - !Ref ConsulTargetGroup
        - !Ref VaultTargetGroup
        - !Ref VaultClusterTargetGroup
        - !Ref RegistryTargetGroup
        - !Ref RegistryAuthTargetGroup
      VPCZoneIdentifier:
        - !Select [0, !Split [",", "Fn::ImportValue": !Sub "${ParentNetworkStack}-SubnetsPublic"] ]
        - !Select [1, !Split [",", "Fn::ImportValue": !Sub "${ParentNetworkStack}-SubnetsPublic"] ]
        - !Select [2, !Split [",", "Fn::ImportValue": !Sub "${ParentNetworkStack}-SubnetsPublic"] ]
      NotificationConfigurations:
      - TopicARN:
          !Ref SwarmManagerAsgNotification
        NotificationTypes:
          - autoscaling:EC2_INSTANCE_LAUNCH
          - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
          - autoscaling:EC2_INSTANCE_TERMINATE
          - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
      Tags:
        -
          Key: swarm-node-type
          PropagateAtLaunch: true
          Value: manager

  InternalLoadBalancer:
    DependsOn:
      - InternalLoadBalancerSecurityGroup
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Scheme: internal
      SecurityGroups:
        - !Ref InternalLoadBalancerSecurityGroup
      Subnets:
        - !Select [0, !Split [",", "Fn::ImportValue": !Sub "${ParentNetworkStack}-SubnetsPublic"] ]
        - !Select [1, !Split [",", "Fn::ImportValue": !Sub "${ParentNetworkStack}-SubnetsPublic"] ]
        - !Select [2, !Split [",", "Fn::ImportValue": !Sub "${ParentNetworkStack}-SubnetsPublic"] ]

  SwarmHealthCheckHttpListener:
    DependsOn:
      - SwarmHealthCheckTargetGroup
      - InternalLoadBalancer
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref SwarmHealthCheckTargetGroup
        Type: forward
      LoadBalancerArn: !Ref InternalLoadBalancer
      Port: 44444
      Protocol: HTTP

  ConsulUiHttpListener:
    DependsOn:
      - ConsulTargetGroup
      - InternalLoadBalancer
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref ConsulTargetGroup
        Type: forward
      LoadBalancerArn: !Ref InternalLoadBalancer
      Port: 8500
      Protocol: HTTP

  VaultHttpListener:
    DependsOn:
      - VaultTargetGroup
      - InternalLoadBalancer
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref VaultTargetGroup
        Type: forward
      LoadBalancerArn: !Ref InternalLoadBalancer
      Port: 8200
      Protocol: HTTP

  VaultClusterHttpListener:
    DependsOn:
      - VaultClusterTargetGroup
      - InternalLoadBalancer
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref VaultClusterTargetGroup
        Type: forward
      LoadBalancerArn: !Ref InternalLoadBalancer
      Port: 8201
      Protocol: HTTP

  ExternalHttpsListener:
    DependsOn:
      - RegistryTargetGroup
      - ExternalLoadBalancer
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      Certificates:
      - CertificateArn: !Ref LoadBalancerCertificateArn
      DefaultActions:
      - TargetGroupArn: !Ref RegistryTargetGroup
        Type: forward
      LoadBalancerArn: !Ref ExternalLoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS-1-2-2017-01

  RegistryListenerRule:
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn:
            Ref: RegistryTargetGroup
      Conditions:
        - Field: host-header
          Values:
          - !Ref RegistrySubDomainName
      ListenerArn: !Ref ExternalHttpsListener
      Priority: 2

  RegistryAuthListenerRule:
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn:
            Ref: RegistryAuthTargetGroup
      Conditions:
        - Field: host-header
          Values:
          - !Ref RegistryAuthSubDomainName
      ListenerArn: !Ref ExternalHttpsListener
      Priority: 3

  SwarmManagerLifecycleHook:
    DependsOn:
      - SwarmManagerAutoScaleGroup
      - SwarmLifecycleQueue
      - SwarmLifecycleQueuePolicy
      - SwarmManagerRole
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName: !Ref SwarmManagerAutoScaleGroup
      DefaultResult: CONTINUE
      LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING
      NotificationTargetARN: !GetAtt SwarmLifecycleQueue.Arn
      RoleARN: !GetAtt SwarmManagerRole.Arn

  LifeCycleHookPolicy:
    DependsOn:
      - SwarmManagerRole
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "swarm-manager-lifecycle-policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "autoscaling:CompleteLifecycleAction"
            Resource: "*"
      Roles:
        - !Ref SwarmManagerRole

  CPUUtilizationTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Average CPU utilization over last 10 minutes higher than 80%'
      Namespace: 'AWS/EC2'
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref SwarmManagerAutoScaleGroup
      MetricName: CPUUtilization
      ComparisonOperator: GreaterThanThreshold
      Statistic: Average
      Period: 600
      EvaluationPeriods: 1
      Threshold: 80
      Unit: Percent
      AlarmActions:
      - 'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'

  # Alarm to catch on going scaling events.
  GroupPendingInstancesTooHigh:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'High number of pending instances over the last 15 minutes'
      TreatMissingData: notBreaching
      Namespace: 'AWS/AutoScaling'
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref SwarmManagerAutoScaleGroup
      MetricName: GroupPendingInstances
      ComparisonOperator: GreaterThanThreshold
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 3
      Threshold: 0
      Unit: Count
      AlarmActions:
      - 'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'

  HTTPCodeELB5XXTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Application load balancer returns 5XX HTTP status codes'
      TreatMissingData: notBreaching
      Namespace: 'AWS/ApplicationELB'
      MetricName: HTTPCode_ELB_5XX_Count
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      Unit: Count
      AlarmActions:
      - 'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'
      Dimensions:
      - Name: LoadBalancer
        Value: !GetAtt InternalLoadBalancer.LoadBalancerFullName

  HTTPCodeTarget5XXTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Application load balancer receives 5XX HTTP status codes from targets'
      TreatMissingData: notBreaching
      Namespace: 'AWS/ApplicationELB'
      MetricName: HTTPCode_Target_5XX_Count
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      Unit: Count
      AlarmActions:
      - 'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'
      Dimensions:
      - Name: LoadBalancer
        Value: !GetAtt InternalLoadBalancer.LoadBalancerFullName

Outputs:
  ManagerSecurityGroupID:
    Description: SecurityGroup ID of the Swarm Manager
    Value: !Ref SwarmManagerSSHSecurityGroup
  ManagerAsgNotificationTopic:
    Description: The ASG notification topic of managers being started or terminated.
    Value: !Ref SwarmManagerAsgNotification
  SwarmTableName:
    Description: The DynamoDB table name for the swarm cluster
    Value: !Ref SwarmDynamoDBTable
    Export:
      Name: !Sub '${AWS::StackName}-SwarmTableName'
  SwarmTableArn:
    Description: The DynamoDB Table ARN for the swarm cluster
    Value: !GetAtt SwarmDynamoDBTable.Arn
    Export:
      Name: !Sub '${AWS::StackName}-SwarmTableArn'
  VaultTableName:
    Description: The DynamoDB table name used by vault
    Value: !Ref VaultDynamoDBTable
    Export:
      Name: !Sub '${AWS::StackName}-VaultTableName'
  VaultTableArn:
    Description: The DynamoDB Table ARN used by vault
    Value: !GetAtt VaultDynamoDBTable.Arn
    Export:
      Name: !Sub '${AWS::StackName}-VaultTableArn'
  SwarmLifecycleQueue:
    Description: The Lifecycle SQS Queue which gets instance termination messages
    Value: !GetAtt SwarmLifecycleQueue.Arn
    Export:
      Name: !Sub '${AWS::StackName}-SwarmLifecycleQueue'
  InternalLoadBalancer:
    Description: The Internal Load Balancer
    Value: !Ref InternalLoadBalancer
    Export:
      Name: !Sub '${AWS::StackName}-InternalLoadBalancer'
  InternalLoadBalancerDNS:
    Description: The DNS of the internal load balancer
    Value: !GetAtt InternalLoadBalancer.DNSName
    Export:
      Name: !Sub '${AWS::StackName}-InternalLoadBalancerDNS'
  ExternalLoadBalancer:
    Description: The External Load Balancer
    Value: !Ref ExternalLoadBalancer
    Export:
      Name: !Sub '${AWS::StackName}-ExternalLoadBalancer'
  ExternalLoadBalancerDNS:
    Description: The DNS of the external load balancer
    Value: !GetAtt ExternalLoadBalancer.DNSName
    Export:
      Name: !Sub '${AWS::StackName}-ExternalLoadBalancerDNS'


Mappings:
  AWSInstanceType2Arch:
    t1.micro:
      Arch: PV64
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
    m1.small:
      Arch: PV64
    m1.medium:
      Arch: PV64
    m1.large:
      Arch: PV64
    m1.xlarge:
      Arch: PV64
    m2.xlarge:
      Arch: PV64
    m2.2xlarge:
      Arch: PV64
    m2.4xlarge:
      Arch: PV64
    m3.medium:
      Arch: HVM64
    m3.large:
      Arch: HVM64
    m3.xlarge:
      Arch: HVM64
    m3.2xlarge:
      Arch: HVM64
    m4.large:
      Arch: HVM64
    m4.xlarge:
      Arch: HVM64
    m4.2xlarge:
      Arch: HVM64
    m4.4xlarge:
      Arch: HVM64
    m4.10xlarge:
      Arch: HVM64
    c1.medium:
      Arch: PV64
    c1.xlarge:
      Arch: PV64
    c3.large:
      Arch: HVM64
    c3.xlarge:
      Arch: HVM64
    c3.2xlarge:
      Arch: HVM64
    c3.4xlarge:
      Arch: HVM64
    c3.8xlarge:
      Arch: HVM64
    c4.large:
      Arch: HVM64
    c4.xlarge:
      Arch: HVM64
    c4.2xlarge:
      Arch: HVM64
    c4.4xlarge:
      Arch: HVM64
    c4.8xlarge:
      Arch: HVM64
    g2.2xlarge:
      Arch: HVMG2
    g2.8xlarge:
      Arch: HVMG2
    r3.large:
      Arch: HVM64
    r3.xlarge:
      Arch: HVM64
    r3.2xlarge:
      Arch: HVM64
    r3.4xlarge:
      Arch: HVM64
    r3.8xlarge:
      Arch: HVM64
    i2.xlarge:
      Arch: HVM64
    i2.2xlarge:
      Arch: HVM64
    i2.4xlarge:
      Arch: HVM64
    i2.8xlarge:
      Arch: HVM64
    d2.xlarge:
      Arch: HVM64
    d2.2xlarge:
      Arch: HVM64
    d2.4xlarge:
      Arch: HVM64
    d2.8xlarge:
      Arch: HVM64
    hi1.4xlarge:
      Arch: HVM64
    hs1.8xlarge:
      Arch: HVM64
    cr1.8xlarge:
      Arch: HVM64
    cc2.8xlarge:
      Arch: HVM64
  AWSInstanceType2NATArch:
    t1.micro:
      Arch: NATPV64
    t2.nano:
      Arch: NATHVM64
    t2.micro:
      Arch: NATHVM64
    t2.small:
      Arch: NATHVM64
    t2.medium:
      Arch: NATHVM64
    t2.large:
      Arch: NATHVM64
    m1.small:
      Arch: NATPV64
    m1.medium:
      Arch: NATPV64
    m1.large:
      Arch: NATPV64
    m1.xlarge:
      Arch: NATPV64
    m2.xlarge:
      Arch: NATPV64
    m2.2xlarge:
      Arch: NATPV64
    m2.4xlarge:
      Arch: NATPV64
    m3.medium:
      Arch: NATHVM64
    m3.large:
      Arch: NATHVM64
    m3.xlarge:
      Arch: NATHVM64
    m3.2xlarge:
      Arch: NATHVM64
    m4.large:
      Arch: NATHVM64
    m4.xlarge:
      Arch: NATHVM64
    m4.2xlarge:
      Arch: NATHVM64
    m4.4xlarge:
      Arch: NATHVM64
    m4.10xlarge:
      Arch: NATHVM64
    c1.medium:
      Arch: NATPV64
    c1.xlarge:
      Arch: NATPV64
    c3.large:
      Arch: NATHVM64
    c3.xlarge:
      Arch: NATHVM64
    c3.2xlarge:
      Arch: NATHVM64
    c3.4xlarge:
      Arch: NATHVM64
    c3.8xlarge:
      Arch: NATHVM64
    c4.large:
      Arch: NATHVM64
    c4.xlarge:
      Arch: NATHVM64
    c4.2xlarge:
      Arch: NATHVM64
    c4.4xlarge:
      Arch: NATHVM64
    c4.8xlarge:
      Arch: NATHVM64
    g2.2xlarge:
      Arch: NATHVMG2
    g2.8xlarge:
      Arch: NATHVMG2
    r3.large:
      Arch: NATHVM64
    r3.xlarge:
      Arch: NATHVM64
    r3.2xlarge:
      Arch: NATHVM64
    r3.4xlarge:
      Arch: NATHVM64
    r3.8xlarge:
      Arch: NATHVM64
    i2.xlarge:
      Arch: NATHVM64
    i2.2xlarge:
      Arch: NATHVM64
    i2.4xlarge:
      Arch: NATHVM64
    i2.8xlarge:
      Arch: NATHVM64
    d2.xlarge:
      Arch: NATHVM64
    d2.2xlarge:
      Arch: NATHVM64
    d2.4xlarge:
      Arch: NATHVM64
    d2.8xlarge:
      Arch: NATHVM64
    hi1.4xlarge:
      Arch: NATHVM64
    hs1.8xlarge:
      Arch: NATHVM64
    cr1.8xlarge:
      Arch: NATHVM64
    cc2.8xlarge:
      Arch: NATHVM64
  # This list comes from https://aws.amazon.com/amazon-linux-ami/
  AWSRegionArch2AMI:
    us-east-1:
      PV64: ami-abc1ebbd
      HVM64: ami-a4c7edb2
      HVMG2: ami-a41a3fb3
    us-east-2:
      PV64: NOT_SUPPORTED
      HVM64: ami-8a7859ef
      HVMG2: NOT_SUPPORTED
    us-west-2:
      PV64: ami-98f3e7e1
      HVM64: ami-6df1e514
      HVMG2: ami-caf253aa
    us-west-1:
      PV64: ami-347e5254
      HVM64: ami-327f5352
      HVMG2: ami-00347e60
    ca-central-1:
      PV64: NOT_SUPPORTED
      HVM64: ami-a7aa15c3
      HVMG2: NOT_SUPPORTED
    eu-west-1:
      PV64: ami-c4bba0a2
      HVM64: ami-d7b9a2b1
      HVMG2: ami-e2f7bd91
    eu-west-2:
      PV64: NOT_SUPPORTED
      HVM64: ami-ed100689
      HVMG2: NOT_SUPPORTED
    eu-central-1:
      PV64: ami-4dbc1a22
      HVM64: ami-82be18ed
      HVMG2: ami-d2ff04bd
    ap-southeast-1:
      PV64: ami-42901f21
      HVM64: ami-77af2014
      HVMG2: ami-f3f95990
    ap-northeast-2:
      PV64: NOT_SUPPORTED
      HVM64: ami-e21cc38c
      HVMG2: NOT_SUPPORTED
    ap-northeast-1:
      PV64: ami-d3d3c4b4
      HVM64: ami-3bd3c45c
      HVMG2: ami-4c78d52d
    ap-southeast-2:
      PV64: ami-43918120
      HVM64: ami-10918173
      HVMG2: ami-3a122e59
    ap-south-1:
      PV64: NOT_SUPPORTED
      HVM64: ami-47205e28
      HVMG2: NOT_SUPPORTED
    sa-east-1:
      PV64: ami-1cdab170
      HVM64: ami-87dab1eb
      HVMG2: NOT_SUPPORTED
