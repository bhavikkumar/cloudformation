---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Docker Swarm Manager Cluster across 3 AZs based on Docker for AWS'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stacks'
      Parameters:
      - ParentVPCStack
      - ParentPublicZoneStack
      - ParentPrivateZoneStack
      - ParentAlertStack
      - LogAggregatorStack
      - CertificateStack
    - Label:
        default: 'Docker Swarm Manager Parameters'
      Parameters:
      - KeyName
      - ManagerInstanceType
      - ManagerClusterSize
      - ManagerDiskSize
      - ManagerDiskType
    - Label:
        default: 'Consul Parameters'
      Parameters:
      - EncryptionToken
      - ConsulACLDataCenter
      - ConsulACLMasterToken

Parameters:
  ParentVPCStack:
    Description: 'Stack name of parent VPC stack based on vpc/vpc-*azs.yaml template.'
    Type: String
  ParentPublicZoneStack:
    Description: 'Stack name of parent Hosted Zone stack based on dns/*-hosted-zone.yaml template.'
    Type: String
  ParentPrivateZoneStack:
    Description: 'Stack name of parent Hosted Zone stack based on dns/*-hosted-zone.yaml template.'
    Type: String
  ParentAlertStack:
    Description: 'Optional but recommended stack name of parent alert stack based on operations/alert.yaml template.'
    Type: String
  LogAggregatorStack:
    Description: 'The log aggregator stack which was created using operations/fluentd-aggregator.yaml template'
    Type: String
  CertificateStack:
    Description: 'The certificate stack which was created using operations/certificate-manager.yaml template'
    Type: String
  KeyName:
    Description: Amazon EC2 Key Pair
    Type: "AWS::EC2::KeyPair::KeyName"
  ManagerClusterSize:
    Description: The number of swarm manager nodes
    Default: 3
    Type: Number
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
  ManagerInstanceType:
    Description: Swarm manager EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m4.16xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.12xlarge
      - m5.24xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.18xlarge
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge
      - x1.16xlarge
      - x1.32xlarge
      - x1e.xlarge
      - x1e.2xlarge
      - x1e.4xlarge
      - x1e.8xlarge
      - x1e.16xlarge
      - x1e.32xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - h1.2xlarge
      - h1.4xlarge
      - h1.8xlarge
      - h1.16xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
      - f1.2xlarge
      - f1.16xlarge
      - g3.4xlarge
      - g3.8xlarge
      - g3.16xlarge
      - p2.xlarge
      - p2.8xlarge
      - p2.16xlarge
      - p3.2xlarge
      - p3.8xlarge
      - p3.16xlarge
  ManagerDiskSize:
    Description: Size of Manager's ephemeral storage volume in GiB
    Type: Number
    MinValue: 8
    Default: 20
    MaxValue: 1024
  ManagerDiskType:
    Description: Manager ephemeral storage volume type
    Type: String
    Default: gp2
    AllowedValues:
      - standard
      - gp2
  EncryptionToken:
    NoEcho: true
    Description: 'Secret key to use for encryption of Consul network traffic. This key must be 16-bytes that are Base64-encoded'
    Type: String
  ConsulACLDataCenter:
    Description: 'This designates the datacenter which is authoritative for ACL information.'
    Type: String
  ConsulACLMasterToken:
    NoEcho: true
    Description: 'Only used for servers in the acl_datacenter, allows operators to bootstrap the ACL system with a token that is well-known.'
    Type: String

Conditions:
  HasKeyName: !Not [!Equals [!Ref KeyName, '']]
  HasAlertTopic: !Not [!Equals [!Ref ParentAlertStack, '']]

Resources:
  SwarmManagerAsgNotification:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: 'Manager ASG Notifications'
      TopicName: 'SwarmManagerNotifications'

  SwarmClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Docker Swarm Mode Security Groups
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '2377'
        ToPort: '2377'
        CidrIp:
          'Fn::ImportValue': !Sub '${ParentVPCStack}-CidrBlock'
      - IpProtocol: tcp
        FromPort: '7946'
        ToPort: '7946'
        CidrIp:
          'Fn::ImportValue': !Sub '${ParentVPCStack}-CidrBlock'
      - IpProtocol: udp
        FromPort: '7946'
        ToPort: '7946'
        CidrIp:
          'Fn::ImportValue': !Sub '${ParentVPCStack}-CidrBlock'
      - IpProtocol: tcp
        FromPort: '4789'
        ToPort: '4789'
        CidrIp:
          'Fn::ImportValue': !Sub '${ParentVPCStack}-CidrBlock'
      - IpProtocol: udp
        FromPort: '4789'
        ToPort: '4789'
        CidrIp:
          'Fn::ImportValue': !Sub '${ParentVPCStack}-CidrBlock'
      - IpProtocol: tcp
        FromPort: '44444'
        ToPort: '44444'
        CidrIp:
          'Fn::ImportValue': !Sub '${ParentVPCStack}-CidrBlock'

  ConsulClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group to allow Consul ports
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '8500'
        ToPort: '8500'
        CidrIp:
          'Fn::ImportValue': !Sub '${ParentVPCStack}-CidrBlock'

  VaultClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group to allow vault ports
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '8200'
        ToPort: '8200'
        CidrIp:
          'Fn::ImportValue': !Sub '${ParentVPCStack}-CidrBlock'
      - IpProtocol: tcp
        FromPort: '8201'
        ToPort: '8201'
        CidrIp:
          'Fn::ImportValue': !Sub '${ParentVPCStack}-CidrBlock'

  HAProxySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group to allow HTTP/HTTPS traffic
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp:
          'Fn::ImportValue': !Sub '${ParentVPCStack}-CidrBlock'
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp:
          'Fn::ImportValue': !Sub '${ParentVPCStack}-CidrBlock'

  HAProxyStatsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group to allow HTTP/HTTPS traffic
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '1936'
        ToPort: '1936'
        CidrIp:
          'Fn::ImportValue': !Sub '${ParentVPCStack}-CidrBlock'

  InternalLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow traffic to the internal load balancer
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '8500'
        ToPort: '8500'
        CidrIp:
          'Fn::ImportValue': !Sub '${ParentVPCStack}-CidrBlock'
      - IpProtocol: tcp
        FromPort: '8200'
        ToPort: '8200'
        CidrIp:
          'Fn::ImportValue': !Sub '${ParentVPCStack}-CidrBlock'
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp:
          'Fn::ImportValue': !Sub '${ParentVPCStack}-CidrBlock'
      - IpProtocol: tcp
        FromPort: '1936'
        ToPort: '1936'
        CidrIp:
          'Fn::ImportValue': !Sub '${ParentVPCStack}-CidrBlock'

  ExternalLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow public traffic to the external load balancer
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
        Description: 'Public API Traffic'
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
        Description: 'Secure Public API Traffic'
      - IpProtocol: tcp
        FromPort: '8200'
        ToPort: '8200'
        CidrIp: 0.0.0.0/0
        Description: 'Public Vault Traffic'
      - IpProtocol: tcp
        FromPort: '8500'
        ToPort: '8500'
        CidrIp: 0.0.0.0/0
        Description: 'Public Consul Traffic'

  SwarmDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: id
          AttributeType: S
      KeySchema:
        -
          AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: !Join ['-', [ !Ref "AWS::StackName", dockerswarm ] ]

  VaultDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: id
          AttributeType: S
      KeySchema:
        -
          AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: !Join ['-', [ !Ref "AWS::StackName", vault ] ]

  SwarmManagerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
                - "autoscaling.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /

  ManagerDynamoDBPolicy:
    DependsOn:
      - SwarmManagerRole
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "swarm-manager-dynamodb-policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "dynamodb:GetItem"
              - "dynamodb:UpdateItem"
              - "dynamodb:PutItem"
              - "dynamodb:DeleteItem"
            Resource: !GetAtt SwarmDynamoDBTable.Arn
      Roles:
        - !Ref SwarmManagerRole

  VaultDynamoDBPolicy:
    DependsOn:
      - SwarmManagerRole
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "vault-dynamodb-policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "dynamodb:GetItem"
              - "dynamodb:PutItem"
            Resource: !GetAtt VaultDynamoDBTable.Arn
      Roles:
        - !Ref SwarmManagerRole

  ManagerEC2Policy:
    DependsOn:
      - SwarmManagerRole
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "swarm-manager-ec2-policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "ec2:CreateTags"
              - "ec2:DescribeTags"
              - "ec2:DescribeInstances"
            Resource: "*"
      Roles:
        - !Ref SwarmManagerRole

  CertificateBucketPolicy:
    DependsOn:
      - SwarmManagerRole
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "certificate-download-policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "s3:ListBucket"
            Resource:
            - 'Fn::ImportValue': !Sub '${CertificateStack}-CertificateBucketArn'
          -
            Effect: "Allow"
            Action:
              - s3:ListObjects
              - "s3:GetObject"
            Resource:
            - !Join ["", [ 'Fn::ImportValue': !Sub '${CertificateStack}-CertificateBucketArn', "/*" ] ]

      Roles:
        - !Ref SwarmManagerRole

  SwarmLifecycleQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 14400
      ReceiveMessageWaitTimeSeconds: 10

  SwarmLifecycleQueuePolicy:
    DependsOn:
      - SwarmLifecycleQueue
      - SwarmManagerRole
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "swarm-sqs-policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "sqs:DeleteMessage"
              - "sqs:ReceiveMessage"
              - "sqs:SendMessage"
              - "sqs:GetQueueUrl"
              - "sns:Publish"
            Resource: !GetAtt SwarmLifecycleQueue.Arn
      Roles:
        - !Ref SwarmManagerRole

  SwarmManagerInstanceProfile:
    DependsOn:
      - SwarmManagerRole
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref SwarmManagerRole

  # This is used to health check the swarm cluster. We don't actually
  # allow any traffic to hit this.
  SwarmHealthCheckTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /ishealthy
      HealthCheckPort: 44444
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '204'
      # This port should only be available internally.
      Port: 44444
      Protocol: HTTP
      UnhealthyThresholdCount: 4
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'

  ConsulTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /v1/health/service/consul
      HealthCheckPort: 8500
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'
      Port: 8500
      Protocol: HTTPS
      UnhealthyThresholdCount: 4
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'

  ConsulExternalTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /v1/health/service/consul
      HealthCheckPort: 8500
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'
      Port: 8500
      Protocol: HTTPS
      UnhealthyThresholdCount: 4
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'

  VaultTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /v1/sys/health
      HealthCheckPort: 8200
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '200,429'
      Port: 8200
      Protocol: HTTPS
      UnhealthyThresholdCount: 4
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'

  VaultExternalTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /v1/sys/health
      HealthCheckPort: 8200
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '200,429'
      Port: 8200
      Protocol: HTTPS
      UnhealthyThresholdCount: 4
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'

  HAProxyHttpTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /health
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 4
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'

  HAProxyHttpsTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /health
      HealthCheckPort: 443
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'
      Port: 443
      Protocol: HTTPS
      UnhealthyThresholdCount: 4
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'

  HAProxyStatsTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /health
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'
      Port: 1936
      Protocol: HTTP
      UnhealthyThresholdCount: 4
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'

  SwarmManagerLaunchConfiguration:
    Metadata:
      Comment: Update, Install Docker and initialise the swarm
      AWS::CloudFormation::Authentication:
        CertificateAccessCreds:
          type: "S3"
          buckets:
            - 'Fn::ImportValue': !Sub '${CertificateStack}-CertificateBucket'
          roleName:
            Ref: SwarmManagerRole
      AWS::CloudFormation::Init:
        configSets:
          full_install:
            - install_cfn
            - install_docker
            - setup_logging
            - init_aws_swarm
            - swarm_node_healthcheck
            - guide_aws_swarm
            - certificates
            - consul
            - vault
            - haproxy
          update_install:
            - install_cfn
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.SwarmManagerLaunchConfiguration.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource SwarmManagerLaunchConfiguration -c update_install --region ${AWS::Region}
                runas=root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files: [/etc/cfn/cfn-hup.conf, /etc/cfn/hooks.d/cfn-auto-reloader.conf]
        install_docker:
          packages:
            yum:
              docker: []
          services:
            sysvinit:
              docker:
                enabled: 'true'
                ensureRunning: 'true'
        setup_logging:
          services:
            sysvinit:
              rsyslog:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - "/etc/rsyslog.d/10-ship-syslog.conf"
          files:
            /etc/rsyslog.d/10-ship-syslog.conf:
              content: |
                # ### begin forwarding rule ###
                # The statement between the begin ... end define a SINGLE forwarding
                # rule. They belong together, do NOT split them. If you create multiple
                # forwarding rules, duplicate the whole block!
                # Remote Logging (we use TCP for reliable delivery)
                #
                # An on-disk queue is created for this action. If the remote host is
                # down, messages are spooled to disk and sent when it is up again.
                $WorkDirectory /var/lib/rsyslog # where to place spool files
                $ActionQueueFileName fluentdq # unique name prefix for spool files
                $ActionQueueMaxDiskSpace 1g   # 1gb space limit (use as much as possible)
                $ActionQueueSaveOnShutdown on # save messages to disk on shutdown
                $ActionQueueType LinkedList   # run asynchronously
                $ActionResumeRetryCount -1    # infinite retries if host is down
                # remote host is: name/ip:port, e.g. 192.168.0.1:514, port optional
                *.* @@localhost:5140
                # ### end of the forwarding rule ###
            /etc/fluentd.conf:
              content: |
                <system>
                  log_level warn
                </system>
                <source>
                  @type  forward
                  @id    local_general_input
                  port  24224
                </source>
                <source>
                  @type syslog
                  @id local_syslog_input
                  port 5140
                  protocol_type tcp
                  tag rsyslog
                  <parse>
                    message_format auto
                  </parse>
                </source>
                <filter **>
                  @type record_transformer
                  <record>
                    host "#{Socket.gethostname}"
                  </record>
                </filter>
                <match **>
                  @type forward
                  send_timeout 60s
                  recover_wait 10s
                  hard_timeout 60s
                  <server>
                    host {{LogAggregatorDNS}}
                    port 24224
                  </server>
                  <buffer>
                    @type file
                    path /fluentd/log/forward.buffer
                    flush_interval 10s
                    retry_wait 20s
                  </buffer>
                </match>
              context:
                LogAggregatorDNS:
                  'Fn::ImportValue': !Sub '${LogAggregatorStack}-LogAggregatorDNS'
          commands:
            run_fluentd:
              command: "docker run -d -h `hostname` -p 24224:24224 -p 5140:5140 --restart=always -e FLUENTD_CONF=fluentd.conf -v /data:/fluentd/log -v /etc/fluentd.conf:/fluentd/etc/fluentd.conf bhavikk/fluentd-sumologic:latest"
              cwd: "~"
        certificates:
          files:
            /tmp/letsencrypt.tar.gz:
              source:
                Fn::Join:
                  - ""
                  -
                    - "https://"
                    - 'Fn::ImportValue': !Sub '${CertificateStack}-CertificateBucket'
                    - ".s3.amazonaws.com"
                    - "/letsencrypt.tar.gz"
              mode: "000644"
              owner: "root"
              group: "root"
              authentication: "CertificateAccessCreds"
          commands:
            create_directory:
              command: "mkdir -p /etc/letsencrypt"
              cwd: "~"
            extract_certificates:
              command: "tar -zxf /tmp/letsencrypt.tar.gz -C /etc/letsencrypt/"
              cwd: "~"
            fix_permissions_live:
              command: "chmod 755 /etc/letsencrypt/live"
              cwd: "~"
            fix_permissions_archive:
              command: "chmod 755 /etc/letsencrypt/archive"
              cwd: "~"
        init_aws_swarm:
          commands:
            docker_run:
              command: "docker run --log-driver=fluentd --restart=no -e DYNAMODB_TABLE=$DYNAMODB_TABLE -v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker bhavikk/init-aws-swarm:latest"
              env:
                DYNAMODB_TABLE: { "Ref" : "SwarmDynamoDBTable" }
              cwd: "~"
        swarm_node_healthcheck:
          commands:
            docker_run:
              command: "docker run --log-driver=fluentd -d --name swarm-healthcheck --restart=always -p 44444:44444 -v /var/run/docker.sock:/var/run/docker.sock bhavikk/swarm-node-healthcheck:latest"
              cwd: "~"
        guide_aws_swarm:
          commands:
            docker_run:
              command: "docker run --log-driver=fluentd -d --name guide-aws --restart=always -e DYNAMODB_TABLE=$DYNAMODB_TABLE -e LIFECYCLE_QUEUE=$LIFECYCLE_QUEUE -v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker bhavikk/guide-aws-swarm:latest"
              env:
                DYNAMODB_TABLE: { "Ref" : "SwarmDynamoDBTable" }
                LIFECYCLE_QUEUE: { "Ref" : "SwarmLifecycleQueue" }
              cwd: "~"
        consul:
          files:
            /opt/consul/config.json:
              content: !Sub |
                {
                  "advertise_addr" : "{{{ADVERTISE_ADRR}}}",
                  "bind_addr": "{{{BIND_ADRR}}}",
                  "client_addr": "0.0.0.0",
                  "cert_file": "/certs/live/{{DOMAIN}}/fullchain.pem",
                  "key_file": "/certs/live/{{DOMAIN}}/privkey.pem",
                  "ca_file": "/certs/live/{{DOMAIN}}/chain.pem",
                  "verify_outgoing": true,
                  "ports" : {
                    "http": -1,
                    "https": 8500
                  },
                  "data_dir": "/consul/data",
                  "datacenter": "${AWS::Region}",
                  "leave_on_terminate" : true,
                  "retry_join" : [
                    "consulserver.{{DOMAIN}}"
                  ],
                  "domain": "{{DOMAIN}}",
                  "skip_leave_on_interrupt" : true,
                  "bootstrap_expect": ${ManagerClusterSize},
                  "server" : true,
                  "ui" : true,
                  "autopilot": {
                    "cleanup_dead_servers": true
                  },
                  "disable_update_check": true,
                  "log_level": "warn",
                  "encrypt": "${EncryptionToken}",
                  "acl_datacenter": "${ConsulACLDataCenter}",
                  "acl_default_policy": "deny",
                  "acl_down_policy": "extend-cache",
                  "acl_master_token": "${ConsulACLMasterToken}",
                  "acl_agent_token": "${ConsulACLMasterToken}"
                }
              context:
                ADVERTISE_ADRR: '{{ GetInterfaceIP \"eth0\" }}'
                BIND_ADRR: '{{ GetInterfaceIP \"eth0\" }}'
                DOMAIN:
                  'Fn::ImportValue': !Sub '${ParentPublicZoneStack}-DomainName'
              mode: '000755'
              owner: root
              group: root
            /opt/consul/compose.yaml:
              content: !Sub |
                ---
                version: '3.3'
                networks:
                  default_net:
                    external: true
                services:
                  server:
                    image: consul:latest
                    logging:
                      driver: "fluentd"
                    networks:
                      default_net:
                        aliases:
                          - consulserver.{{DOMAIN}}
                    command: "consul agent -config-file /consul/config/config.json"
                    ports:
                      - target: 8500
                        published: 8500
                        mode: host
                      - target: 8600
                        published: 8600
                        mode: host
                      - target: 8600
                        published: 8600
                        protocol: udp
                        mode: host
                    volumes:
                      - /opt/consul:/consul/config
                      - /etc/letsencrypt:/certs:ro
                    deploy:
                      mode: global
                      endpoint_mode: dnsrr
                      update_config:
                        parallelism: 1
                        failure_action: rollback
                        delay: 30s
                      restart_policy:
                        condition: any
                        delay: 5s
                        window: 120s
                      placement:
                        constraints:
                          - node.role == manager
                  agent:
                    image: consul:latest
                    logging:
                      driver: "fluentd"
                    networks:
                      default_net:
                        aliases:
                          - consulagent.{{DOMAIN}}
                    command: "consul agent -config-file /consul/config/config.json"
                    ports:
                      - target: 8500
                        published: 8500
                        mode: host
                      - target: 8600
                        published: 8600
                        mode: host
                    volumes:
                      - /opt/consul:/consul/config
                      - /etc/letsencrypt:/certs:ro
                    deploy:
                      mode: global
                      endpoint_mode: dnsrr
                      update_config:
                        parallelism: 1
                        failure_action: rollback
                        delay: 30s
                      restart_policy:
                        condition: any
                        delay: 5s
                        window: 120s
                      placement:
                        constraints:
                          - node.role == worker
              context:
                DOMAIN:
                  'Fn::ImportValue': !Sub '${ParentPublicZoneStack}-DomainName'
              mode: '000755'
              owner: root
              group: root
          commands:
            config_file_permission:
              command: "chmod 644 /opt/consul/config.json"
            compose_file_permission:
              command: "chmod 644 /opt/consul/compose.yaml"
            create_default_network:
              command: "docker network create -d overlay --subnet=192.168.0.0/16 default_net"
              ignoreErrors: true
            deploy_consul_stack:
              command: "docker stack deploy -c /opt/consul/compose.yaml consul"
              cwd: "~"
              ignoreErrors: true
        vault:
          files:
            /opt/vault/vault.hcl:
              content: !Sub |
                ui = true
                storage "consul" {
                  address = "consul-server.{{DOMAIN}}:8500"
                  path = "vault/"
                  scheme="https"
                  token="${ConsulACLMasterToken}"
                  tls_cert_file = "/certs/live/{{DOMAIN}}/fullchain.pem"
                  tls_key_file = "/certs/live/{{DOMAIN}}/privkey.pem"
                  tls_ca_file = "/certs/live/{{DOMAIN}}/chain.pem"
                }
                listener "tcp" {
                  address = "0.0.0.0:8200"
                  tls_cert_file = "/certs/live/{{DOMAIN}}/fullchain.pem"
                  tls_key_file = "/certs/live/{{DOMAIN}}/privkey.pem"
                }
              context:
                DOMAIN:
                  'Fn::ImportValue': !Sub '${ParentPublicZoneStack}-DomainName'
              mode: '000755'
              owner: root
              group: root
          commands:
            config_file_permission:
              command: "chmod 644 /opt/vault/vault.hcl"
            docker_run:
              command: "docker run --log-driver=fluentd -d --name vault --net=host --restart=always -e VAULT_API_ADDR=https://`curl http://169.254.169.254/latest/meta-data/local-ipv4`:8200 -v /etc/letsencrypt:/certs:ro -v /opt/vault:/config --cap-add IPC_LOCK vault server -config=/config/vault.hcl"
              cwd: "~"
            init_vault:
              command: "docker run --log-driver=fluentd --restart=no -e DYNAMODB_TABLE=$DYNAMODB_TABLE -e VAULT_ADDR=https://`curl http://169.254.169.254/latest/meta-data/local-ipv4`:8200 -e VAULT_SKIP_VERIFY=true bhavikk/init-vault:latest"
              env:
                DYNAMODB_TABLE: { "Ref" : "VaultDynamoDBTable" }
              cwd: "~"
        haproxy:
          files:
            /opt/haproxy/compose.yaml:
              content: !Sub |
                ---
                version: '3.3'
                networks:
                  default_net:
                    external: true
                services:
                  server:
                    image: bhavikk/haproxy-consul-template
                    logging:
                      driver: "fluentd"
                    networks:
                      default_net:
                        aliases:
                          - haproxy.{{DOMAIN}}
                    command: "-config=/tmp/haproxy.json"
                    ports:
                      - target: 80
                        published: 80
                        mode: host
                      - target: 443
                        published: 443
                        mode: host
                      - target: 1936
                        published: 1936
                        mode: host
                    volumes:
                      - /opt/haproxy:/tmp
                      - /etc/letsencrypt:/certs:ro
                    deploy:
                      mode: global
                      endpoint_mode: dnsrr
                      update_config:
                        parallelism: 1
                        failure_action: rollback
                        delay: 30s
                      restart_policy:
                        condition: any
                        delay: 5s
                        window: 120s
                      placement:
                        constraints:
                          - node.role == worker
              context:
                DOMAIN:
                  'Fn::ImportValue': !Sub '${ParentPublicZoneStack}-DomainName'
              mode: '000755'
              owner: root
              group: root
          commands:
            compose_file_permission:
              command: "chmod 644 /opt/haproxy/compose.yaml"
            docker_run:
              command: "docker stack deploy -c /opt/haproxy/compose.yaml haproxy"
              cwd: "~"
              ignoreErrors: true
    DependsOn:
      - PrivateDNS
      - SwarmDynamoDBTable
      - VaultDynamoDBTable
      - SwarmManagerInstanceProfile
      - SwarmClusterSecurityGroup
      - ConsulClusterSecurityGroup
      - VaultClusterSecurityGroup
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeSize: !Ref ManagerDiskSize
            VolumeType: !Ref ManagerDiskType
      ImageId: !FindInMap [AWSRegionArch2AMI, !Ref 'AWS::Region', !FindInMap [AWSInstanceType2Arch, !Ref 'ManagerInstanceType', Arch]]
      InstanceType: !Ref ManagerInstanceType
      IamInstanceProfile: !Ref SwarmManagerInstanceProfile
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref SwarmClusterSecurityGroup
        - !Ref ConsulClusterSecurityGroup
        - !Ref VaultClusterSecurityGroup
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash -xe
            yum update -y
            yum install -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource SwarmManagerLaunchConfiguration --configsets full_install --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource SwarmManagerAutoScaleGroup --region ${AWS::Region}

  SwarmManagerAutoScaleGroup:
    DependsOn:
      - SwarmManagerAsgNotification
      - SwarmManagerLaunchConfiguration
      - SwarmHealthCheckTargetGroup
      - ConsulTargetGroup
      - ConsulExternalTargetGroup
      - VaultTargetGroup
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Timeout: PT20M
        Count: !Ref ManagerClusterSize
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: !Ref ManagerClusterSize
        PauseTime: PT20M
        WaitOnResourceSignals: true
    Properties:
      MinSize: !Ref ManagerClusterSize
      MaxSize: 8
      DesiredCapacity: !Ref ManagerClusterSize
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      LaunchConfigurationName: !Ref SwarmManagerLaunchConfiguration
      MetricsCollection:
        - Granularity: 1Minute
      TargetGroupARNs:
        - !Ref SwarmHealthCheckTargetGroup
        - !Ref ConsulTargetGroup
        - !Ref ConsulExternalTargetGroup
        - !Ref VaultTargetGroup
        - !Ref VaultExternalTargetGroup
      VPCZoneIdentifier:
        - !Select [0, !Split [",", "Fn::ImportValue": !Sub "${ParentVPCStack}-SubnetsPublic"] ]
        - !Select [1, !Split [",", "Fn::ImportValue": !Sub "${ParentVPCStack}-SubnetsPublic"] ]
        - !Select [2, !Split [",", "Fn::ImportValue": !Sub "${ParentVPCStack}-SubnetsPublic"] ]
      NotificationConfigurations:
      - TopicARN:
          !Ref SwarmManagerAsgNotification
        NotificationTypes:
          - autoscaling:EC2_INSTANCE_LAUNCH
          - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
          - autoscaling:EC2_INSTANCE_TERMINATE
          - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
      Tags:
        -
          Key: swarm-node-type
          PropagateAtLaunch: true
          Value: manager

  InternalLoadBalancer:
    DependsOn:
      - InternalLoadBalancerSecurityGroup
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Scheme: internal
      SecurityGroups:
        - !Ref InternalLoadBalancerSecurityGroup
      Subnets:
        - !Select [0, !Split [",", "Fn::ImportValue": !Sub "${ParentVPCStack}-SubnetsPublic"] ]
        - !Select [1, !Split [",", "Fn::ImportValue": !Sub "${ParentVPCStack}-SubnetsPublic"] ]
        - !Select [2, !Split [",", "Fn::ImportValue": !Sub "${ParentVPCStack}-SubnetsPublic"] ]

  ExternalLoadBalancer:
    DependsOn:
      - HAProxySecurityGroup
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ExternalLoadBalancerSecurityGroup
      Subnets:
        - !Select [0, !Split [",", "Fn::ImportValue": !Sub "${ParentVPCStack}-SubnetsPublic"] ]
        - !Select [1, !Split [",", "Fn::ImportValue": !Sub "${ParentVPCStack}-SubnetsPublic"] ]
        - !Select [2, !Split [",", "Fn::ImportValue": !Sub "${ParentVPCStack}-SubnetsPublic"] ]

  SwarmHealthCheckHttpListener:
    DependsOn:
      - SwarmHealthCheckTargetGroup
      - InternalLoadBalancer
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref SwarmHealthCheckTargetGroup
        Type: forward
      LoadBalancerArn: !Ref InternalLoadBalancer
      Port: 44444
      Protocol: HTTP

  ConsulUiHttpListener:
    DependsOn:
      - ConsulTargetGroup
      - InternalLoadBalancer
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref ConsulTargetGroup
        Type: forward
      LoadBalancerArn: !Ref InternalLoadBalancer
      Port: 8500
      Protocol: HTTPS
      Certificates:
      - CertificateArn:
          'Fn::ImportValue': !Sub '${CertificateStack}-CertificateArn'
      SslPolicy: 'ELBSecurityPolicy-TLS-1-2-2017-01'

  ConsulUiExternalHttpListener:
    DependsOn:
      - ConsulExternalTargetGroup
      - ExternalLoadBalancer
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref ConsulExternalTargetGroup
        Type: forward
      LoadBalancerArn: !Ref ExternalLoadBalancer
      Port: 8500
      Protocol: HTTPS
      Certificates:
      - CertificateArn:
          'Fn::ImportValue': !Sub '${CertificateStack}-CertificateArn'
      SslPolicy: 'ELBSecurityPolicy-TLS-1-2-2017-01'

  VaultHttpListener:
    DependsOn:
      - VaultTargetGroup
      - InternalLoadBalancer
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref VaultTargetGroup
        Type: forward
      LoadBalancerArn: !Ref InternalLoadBalancer
      Port: 8200
      Protocol: HTTPS
      Certificates:
      - CertificateArn:
          'Fn::ImportValue': !Sub '${CertificateStack}-CertificateArn'
      SslPolicy: 'ELBSecurityPolicy-TLS-1-2-2017-01'

  VaultExternalHttpListener:
    DependsOn:
      - VaultExternalTargetGroup
      - ExternalLoadBalancer
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref VaultExternalTargetGroup
        Type: forward
      LoadBalancerArn: !Ref ExternalLoadBalancer
      Port: 8200
      Protocol: HTTPS
      Certificates:
      - CertificateArn:
          'Fn::ImportValue': !Sub '${CertificateStack}-CertificateArn'
      SslPolicy: 'ELBSecurityPolicy-TLS-1-2-2017-01'

  HAProxyHttpClusterListener:
    DependsOn:
      - HAProxyHttpTargetGroup
      - ExternalLoadBalancer
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref HAProxyHttpTargetGroup
        Type: forward
      LoadBalancerArn: !Ref ExternalLoadBalancer
      Port: 80
      Protocol: HTTP

  HAProxyHttpsClusterListener:
    DependsOn:
      - HAProxyHttpsTargetGroup
      - ExternalLoadBalancer
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref HAProxyHttpsTargetGroup
        Type: forward
      LoadBalancerArn: !Ref ExternalLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
      - CertificateArn:
          'Fn::ImportValue': !Sub '${CertificateStack}-CertificateArn'
      SslPolicy: 'ELBSecurityPolicy-TLS-1-2-2017-01'

  HAProxyStatsClusterListener:
    DependsOn:
      - HAProxyStatsTargetGroup
      - InternalLoadBalancer
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref HAProxyStatsTargetGroup
        Type: forward
      LoadBalancerArn: !Ref InternalLoadBalancer
      Port: 1936
      Protocol: HTTP

  PublicDNS:
    DependsOn:
      - ExternalLoadBalancer
    Type: 'AWS::Route53::RecordSetGroup'
    Properties:
      HostedZoneId:
        'Fn::ImportValue': !Sub '${ParentPublicZoneStack}-HostedZoneId'
      RecordSets:
      - Name: !Join [ '.', [ 'consul', 'Fn::ImportValue': !Sub '${ParentPublicZoneStack}-DomainName' ] ]
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt ExternalLoadBalancer.CanonicalHostedZoneID
          DNSName: !GetAtt ExternalLoadBalancer.DNSName
      - Name: !Join [ '.', [ 'vault', 'Fn::ImportValue': !Sub '${ParentPublicZoneStack}-DomainName' ] ]
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt ExternalLoadBalancer.CanonicalHostedZoneID
          DNSName: !GetAtt ExternalLoadBalancer.DNSName
      - Name: !Join [ '.', [ 'api', 'Fn::ImportValue': !Sub '${ParentPublicZoneStack}-DomainName' ] ]
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt ExternalLoadBalancer.CanonicalHostedZoneID
          DNSName: !GetAtt ExternalLoadBalancer.DNSName

  PrivateDNS:
    DependsOn:
      - InternalLoadBalancer
    Type: 'AWS::Route53::RecordSetGroup'
    Properties:
      HostedZoneId:
        'Fn::ImportValue': !Sub '${ParentPrivateZoneStack}-HostedZoneId'
      RecordSets:
      - Name: !Join [ '.', [ 'consul', 'Fn::ImportValue': !Sub '${ParentPrivateZoneStack}-DomainName' ] ]
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt InternalLoadBalancer.CanonicalHostedZoneID
          DNSName: !GetAtt InternalLoadBalancer.DNSName
      - Name: !Join [ '.', [ 'vault', 'Fn::ImportValue': !Sub '${ParentPrivateZoneStack}-DomainName' ] ]
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt InternalLoadBalancer.CanonicalHostedZoneID
          DNSName: !GetAtt InternalLoadBalancer.DNSName
      - Name: !Join [ '.', [ 'consul-server', 'Fn::ImportValue': !Sub '${ParentPrivateZoneStack}-DomainName' ] ]
        Type: A
        TTL: 300
        ResourceRecords:
        - 127.0.0.1
      - Name: !Join [ '.', [ 'consul-agent', 'Fn::ImportValue': !Sub '${ParentPrivateZoneStack}-DomainName' ] ]
        Type: A
        TTL: 300
        ResourceRecords:
        - 172.18.0.1

  SwarmManagerLifecycleHook:
    DependsOn:
      - SwarmManagerAutoScaleGroup
      - SwarmLifecycleQueue
      - SwarmLifecycleQueuePolicy
      - SwarmManagerRole
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName: !Ref SwarmManagerAutoScaleGroup
      DefaultResult: CONTINUE
      LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING
      NotificationTargetARN: !GetAtt SwarmLifecycleQueue.Arn
      RoleARN: !GetAtt SwarmManagerRole.Arn

  LifeCycleHookPolicy:
    DependsOn:
      - SwarmManagerRole
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "swarm-manager-lifecycle-policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "autoscaling:CompleteLifecycleAction"
            Resource: "*"
      Roles:
        - !Ref SwarmManagerRole

  CPUUtilizationTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Average CPU utilization over last 10 minutes higher than 80%'
      Namespace: 'AWS/EC2'
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref SwarmManagerAutoScaleGroup
      MetricName: CPUUtilization
      ComparisonOperator: GreaterThanThreshold
      Statistic: Average
      Period: 600
      EvaluationPeriods: 1
      Threshold: 80
      Unit: Percent
      AlarmActions:
      - 'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'

  # Alarm to catch on going scaling events.
  GroupPendingInstancesTooHigh:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'High number of pending instances over the last 15 minutes'
      TreatMissingData: notBreaching
      Namespace: 'AWS/AutoScaling'
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref SwarmManagerAutoScaleGroup
      MetricName: GroupPendingInstances
      ComparisonOperator: GreaterThanThreshold
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 3
      Threshold: 0
      Unit: Count
      AlarmActions:
      - 'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'

  HTTPCodeELB5XXTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Application load balancer returns 5XX HTTP status codes'
      TreatMissingData: notBreaching
      Namespace: 'AWS/ApplicationELB'
      MetricName: HTTPCode_ELB_5XX_Count
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      Unit: Count
      AlarmActions:
      - 'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'
      Dimensions:
      - Name: LoadBalancer
        Value: !GetAtt InternalLoadBalancer.LoadBalancerFullName

  HTTPCodeTarget5XXTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Application load balancer receives 5XX HTTP status codes from targets'
      TreatMissingData: notBreaching
      Namespace: 'AWS/ApplicationELB'
      MetricName: HTTPCode_Target_5XX_Count
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      Unit: Count
      AlarmActions:
      - 'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'
      Dimensions:
      - Name: LoadBalancer
        Value: !GetAtt InternalLoadBalancer.LoadBalancerFullName

  ExternalHTTPCodeELB5XXTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Application load balancer returns 5XX HTTP status codes'
      TreatMissingData: notBreaching
      Namespace: 'AWS/ApplicationELB'
      MetricName: HTTPCode_ELB_5XX_Count
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      Unit: Count
      AlarmActions:
      - 'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'
      Dimensions:
      - Name: LoadBalancer
        Value: !GetAtt ExternalLoadBalancer.LoadBalancerFullName

  ExternalHTTPCodeTarget5XXTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Application load balancer receives 5XX HTTP status codes from targets'
      TreatMissingData: notBreaching
      Namespace: 'AWS/ApplicationELB'
      MetricName: HTTPCode_Target_5XX_Count
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      Unit: Count
      AlarmActions:
      - 'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'
      Dimensions:
      - Name: LoadBalancer
        Value: !GetAtt ExternalLoadBalancer.LoadBalancerFullName

Outputs:
  ManagerAsgNotificationTopic:
    Description: The ASG notification topic of managers being started or terminated.
    Value: !Ref SwarmManagerAsgNotification
  SwarmSecurityGroup:
    Description: The security group which allows the Docker Swarm to function.
    Value: !Ref SwarmClusterSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-SwarmClusterSecurityGroup'
  ConsulSecurityGroup:
    Description: The security group which allows the Consul cluster to function
    Value: !Ref ConsulClusterSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-ConsulClusterSecurityGroup'
  HAProxySecurityGroupOutput:
    Description: The security group which allows HAProxy to function
    Value: !Ref HAProxySecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-HAProxySecurityGroup'
  HAProxyStatsSecurityGroupOutput:
    Description: The security group which allows HAProxy stats to function
    Value: !Ref HAProxyStatsSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-HAProxyStatsSecurityGroup'
  SwarmTableName:
    Description: The DynamoDB table name for the swarm cluster
    Value: !Ref SwarmDynamoDBTable
    Export:
      Name: !Sub '${AWS::StackName}-SwarmTableName'
  SwarmTableArn:
    Description: The DynamoDB Table ARN for the swarm cluster
    Value: !GetAtt SwarmDynamoDBTable.Arn
    Export:
      Name: !Sub '${AWS::StackName}-SwarmTableArn'
  SwarmLifecycleQueue:
    Description: The Lifecycle SQS Queue which gets instance termination messages
    Value: !GetAtt SwarmLifecycleQueue.Arn
    Export:
      Name: !Sub '${AWS::StackName}-SwarmLifecycleQueue'
  InternalLoadBalancer:
    Description: The Internal Load Balancer
    Value: !Ref InternalLoadBalancer
    Export:
      Name: !Sub '${AWS::StackName}-InternalLoadBalancer'
  InternalLoadBalancerDNS:
    Description: The DNS of the internal load balancer
    Value: !GetAtt InternalLoadBalancer.DNSName
    Export:
      Name: !Sub '${AWS::StackName}-InternalLoadBalancerDNS'
  ExternalLoadBalancer:
    Description: The External Load Balancer
    Value: !Ref ExternalLoadBalancer
    Export:
      Name: !Sub '${AWS::StackName}-ExternalLoadBalancer'
  ExternalLoadBalancerDNS:
    Description: The DNS of the external load balancer
    Value: !GetAtt ExternalLoadBalancer.DNSName
    Export:
      Name: !Sub '${AWS::StackName}-ExternalLoadBalancerDNS'
  ConsulTargetGroup:
    Description: The Consul Cluster target group
    Value: !Ref ConsulTargetGroup
    Export:
      Name: !Sub '${AWS::StackName}-ConsulTargetGroup'
  SwarmHealthCheckTargetGroup:
    Description: The Docker Swarm healthcheck target group
    Value: !Ref SwarmHealthCheckTargetGroup
    Export:
      Name: !Sub '${AWS::StackName}-SwarmHealthCheckTargetGroup'
  HAProxyHttpTargetGroup:
    Description: The HA Proxy target group
    Value: !Ref HAProxyHttpTargetGroup
    Export:
      Name: !Sub '${AWS::StackName}-HAProxyHttpTargetGroup'
  HAProxyHttpsTargetGroup:
    Description: The HA Proxy target group
    Value: !Ref HAProxyHttpsTargetGroup
    Export:
      Name: !Sub '${AWS::StackName}-HAProxyHttpsTargetGroup'      
  HAProxyStatsTargetGroup:
    Description: The HA Proxy stats target group
    Value: !Ref HAProxyStatsTargetGroup
    Export:
      Name: !Sub '${AWS::StackName}-HAProxyStatsTargetGroup'

Mappings:
  # This list comes from https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes
  AWSInstanceType2Arch:
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
    t2.xlarge:
      Arch: HVM64
    t2.2xlarge:
      Arch: HVM64
    m4.large:
      Arch: HVM64
    m4.xlarge:
      Arch: HVM64
    m4.2xlarge:
      Arch: HVM64
    m4.4xlarge:
      Arch: HVM64
    m4.10xlarge:
      Arch: HVM64
    m5.large:
      Arch: HVM64
    m5.xlarge:
      Arch: HVM64
    m5.2xlarge:
      Arch: HVM64
    m5.4xlarge:
      Arch: HVM64
    m5.12xlarge:
      Arch: HVM64
    m5.24xlarge:
      Arch: HVM64
    c4.large:
      Arch: HVM64
    c4.xlarge:
      Arch: HVM64
    c4.2xlarge:
      Arch: HVM64
    c4.4xlarge:
      Arch: HVM64
    c4.8xlarge:
      Arch: HVM64
    c5.large:
      Arch: HVM64
    c5.xlarge:
      Arch: HVM64
    c5.2xlarge:
      Arch: HVM64
    c5.4xlarge:
      Arch: HVM64
    c5.9xlarge:
      Arch: HVM64
    c5.18xlarge:
      Arch: HVM64
    r4.large:
      Arch: HVM64
    r4.xlarge:
      Arch: HVM64
    r4.2xlarge:
      Arch: HVM64
    r4.4xlarge:
      Arch: HVM64
    r4.8xlarge:
      Arch: HVM64
    r4.16xlarge:
      Arch: HVM64
    x1.16xlarge:
      Arch: HVM64
    x1.32xlarge:
      Arch: HVM64
    x1e.xlarge:
      Arch: HVM64
    x1e.2xlarge:
      Arch: HVM64
    x1e.4xlarge:
      Arch: HVM64
    x1e.8xlarge:
      Arch: HVM64
    x1e.16xlarge:
      Arch: HVM64
    x1e.32xlarge:
      Arch: HVM64
    d2.xlarge:
      Arch: HVM64
    d2.2xlarge:
      Arch: HVM64
    d2.4xlarge:
      Arch: HVM64
    d2.8xlarge:
      Arch: HVM64
    h1.2xlarge:
      Arch: HVM64
    h1.4xlarge:
      Arch: HVM64
    h1.8xlarge:
      Arch: HVM64
    h1.16xlarge:
      Arch: HVM64
    i3.large:
      Arch: HVM64
    i3.xlarge:
      Arch: HVM64
    i3.2xlarge:
      Arch: HVM64
    i3.4xlarge:
      Arch: HVM64
    i3.8xlarge:
      Arch: HVM64
    i3.16xlarge:
      Arch: HVM64
    f1.2xlarge:
      Arch: HVM64
    f1.16xlarge:
      Arch: HVM64
    g3.4xlarge:
      Arch: HVM64
    g3.8xlarge:
      Arch: HVM64
    g3.16xlarge:
      Arch: HVM64
    p2.xlarge:
      Arch: HVM64
    p2.8xlarge:
      Arch: HVM64
    p2.16xlarge:
      Arch: HVM64
    p3.2xlarge:
      Arch: HVM64
    p3.8xlarge:
      Arch: HVM64
    p3.16xlarge:
      Arch: HVM64
  # This list comes from https://aws.amazon.com/amazon-linux-ami/
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-97785bed
      HVMG2: ami-0a6e3770
    us-east-2:
      HVM64: ami-f63b1193
      HVMG2: NOT_SUPPORTED
    us-west-2:
      HVM64: ami-f2d3638a
      HVMG2: ami-ee15a196
    us-west-1:
      HVM64: ami-824c4ee2
      HVMG2: ami-0da4a46d
    ca-central-1:
      HVM64: ami-a954d1cd
      HVMG2: NOT_SUPPORTED
    eu-west-1:
      HVM64: ami-d834aba1
      HVMG2: ami-af8013d6
    eu-west-2:
      HVM64: ami-403e2524
      HVMG2: NOT_SUPPORTED
    eu-west-3:
      HVM64: ami-8ee056f3
      HVMG2: NOT_SUPPORTED
    eu-central-1:
      HVM64: ami-5652ce39
      HVMG2: ami-1d58ca72
    ap-southeast-1:
      HVM64: ami-68097514
      HVMG2: ami-c06013bc
    ap-northeast-2:
      HVM64: ami-863090e8
      HVMG2: NOT_SUPPORTED
    ap-northeast-1:
      HVM64: ami-ceafcba8
      HVMG2: ami-edfd658b
    ap-southeast-2:
      HVM64: ami-942dd1f6
      HVMG2: ami-85ef12e7
    ap-south-1:
      HVM64: ami-531a4c3c
      HVMG2: ami-411e492e
    sa-east-1:
      HVM64: ami-84175ae8
      HVMG2: NOT_SUPPORTED
