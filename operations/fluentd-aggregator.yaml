---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'FluentD aggregator cluster across 3 AZs'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stacks'
      Parameters:
      - ParentVPCStack
      - ParentPublicZoneStack
      - ParentPrivateZoneStack
      - ParentAlertStack
    - Label:
        default: 'Sumologic Parameters'
      Parameters:
      - SumoLogicSysLogCollector
      - SumoLogicFluentCollector
      - SumoLogicDefaultCollector
      - Environment
    - Label:
        default: 'Log Aggregator Parameters'
      Parameters:
      - InstanceType
      - ClusterSize
      - DiskSize
      - DiskType

Parameters:
  ParentVPCStack:
    Description: 'Stack name of parent VPC stack based on vpc/vpc-*azs.yaml template.'
    Type: String
  ParentPublicZoneStack:
    Description: 'Stack name of parent Hosted Zone stack based on dns/*-hosted-zone.yaml template.'
    Type: String
  ParentPrivateZoneStack:
    Description: 'Stack name of parent Hosted Zone stack based on dns/*-hosted-zone.yaml template.'
    Type: String
  ParentAlertStack:
    Description: 'Optional but recommended stack name of parent alert stack based on operations/alert.yaml template.'
    Type: String
  SumoLogicSysLogCollector:
    Description: 'The SumoLogic HTTP collector URL where syslogs should be sent'
    Type: String
    NoEcho: true
  SumoLogicFluentCollector:
    Description: 'The SumoLogic HTTP collector URL where fluent logs should be sent'
    Type: String
    NoEcho: true
  SumoLogicDefaultCollector:
    Description: 'The SumoLogic HTTP collector URL where unmatched logs should be sent'
    Type: String
    NoEcho: true
  Environment:
    Description: 'The enviornment that the stack is being deployed in'
    Type: String
    Default: playground
    AllowedValues:
    - playground
    - dev
    - demo
    - prod
  ClusterSize:
    Description: The number of log aggregators
    Default: 1
    Type: Number
    MinValue: 1
    MaxValue: 3
    ConstraintDescription: The number of log aggregators is invalid.
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - t2.xlarge
    - t2.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - m4.16xlarge
    - m5.large
    - m5.xlarge
    - m5.2xlarge
    - m5.4xlarge
    - m5.12xlarge
    - m5.24xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - c5.large
    - c5.xlarge
    - c5.2xlarge
    - c5.4xlarge
    - c5.9xlarge
    - c5.18xlarge
    - r4.large
    - r4.xlarge
    - r4.2xlarge
    - r4.4xlarge
    - r4.8xlarge
    - r4.16xlarge
    - x1.16xlarge
    - x1.32xlarge
    - x1e.xlarge
    - x1e.2xlarge
    - x1e.4xlarge
    - x1e.8xlarge
    - x1e.16xlarge
    - x1e.32xlarge
    - d2.xlarge
    - d2.2xlarge
    - d2.4xlarge
    - d2.8xlarge
    - h1.2xlarge
    - h1.4xlarge
    - h1.8xlarge
    - h1.16xlarge
    - i3.large
    - i3.xlarge
    - i3.2xlarge
    - i3.4xlarge
    - i3.8xlarge
    - i3.16xlarge
    - f1.2xlarge
    - f1.16xlarge
    - g3.4xlarge
    - g3.8xlarge
    - g3.16xlarge
    - p2.xlarge
    - p2.8xlarge
    - p2.16xlarge
    - p3.2xlarge
    - p3.8xlarge
    - p3.16xlarge
  DiskSize:
    Description: Size of ephemeral storage volume in GiB
    Type: Number
    MinValue: 8
    Default: 8
    MaxValue: 1024
    ConstraintDescription: The storage size is invalid.
  DiskType:
    Description: Ephemeral storage volume type
    Type: String
    Default: gp2
    AllowedValues:
    - standard
    - gp2

Conditions:
  HasAlertTopic: !Not [!Equals [!Ref ParentAlertStack, '']]

Resources:
  LogAggAsgNotification:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: 'Log Aggregator ASG Notifications'
      TopicName: 'LogAggNotifications'

  LogAggregatorSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Log aggregator security group
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '24224'
        ToPort: '24224'
        CidrIp:
          'Fn::ImportValue': !Sub '${ParentVPCStack}-CidrBlock'

  LogAggNetworkLoadBalancer:
    DependsOn:
    - LogAggregatorSecurityGroup
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Scheme: internal
      Type: network
      Subnets:
      - !Select [0, !Split [",", "Fn::ImportValue": !Sub "${ParentVPCStack}-SubnetsPublic"]]
      - !Select [1, !Split [",", "Fn::ImportValue": !Sub "${ParentVPCStack}-SubnetsPublic"]]
      - !Select [2, !Split [",", "Fn::ImportValue": !Sub "${ParentVPCStack}-SubnetsPublic"]]

  LogAggregatorTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: TCP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      Name: !Join ['-', [!Ref "AWS::StackName", NodeHealthCheck]]
      Port: 24224
      Protocol: TCP
      UnhealthyThresholdCount: 3
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'

  LogAggLaunchConfiguration:
    Metadata:
      Comment: Launches a FluentD Log Aggregator
      AWS::CloudFormation::Init:
        configSets:
          full_install:
          - install_cfn
          - install_docker
          - configure_rsyslog
          - configure_fluentd
          update_install:
          - install_cfn
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.SwarmManagerLaunchConfiguration.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LogAggLaunchConfiguration -c update_install --region ${AWS::Region}
                runas=root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - "/etc/cfn/cfn-hup.conf"
                - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
        install_docker:
          packages:
            yum:
              docker: []
          services:
            sysvinit:
              docker:
                enabled: 'true'
                ensureRunning: 'true'
        configure_rsyslog:
          services:
            sysvinit:
              rsyslog:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - "/etc/rsyslog.d/10-ship-syslog.conf"
          files:
            /etc/rsyslog.d/10-ship-syslog.conf:
              content: |
                # ### begin forwarding rule ###
                # The statement between the begin ... end define a SINGLE forwarding
                # rule. They belong together, do NOT split them. If you create multiple
                # forwarding rules, duplicate the whole block!
                # Remote Logging (we use TCP for reliable delivery)
                #
                # An on-disk queue is created for this action. If the remote host is
                # down, messages are spooled to disk and sent when it is up again.
                $WorkDirectory /var/lib/rsyslog # where to place spool files
                $ActionQueueFileName fluentdq # unique name prefix for spool files
                $ActionQueueMaxDiskSpace 1g   # 1gb space limit (use as much as possible)
                $ActionQueueSaveOnShutdown on # save messages to disk on shutdown
                $ActionQueueType LinkedList   # run asynchronously
                $ActionResumeRetryCount -1    # infinite retries if host is down
                # remote host is: name/ip:port, e.g. 192.168.0.1:514, port optional
                *.* @@localhost:5140
                # ### end of the forwarding rule ###
        configure_fluentd:
          files:
            /etc/fluentd.conf:
              content: !Sub |
                <system>
                  log_level info
                </system>
                <source>
                  @type  forward
                  @id    general_input
                  port  24224
                </source>
                <source>
                  @type syslog
                  @id local_syslog_input
                  port 5140
                  protocol_type tcp
                  tag rsyslog
                  <parse>
                    message_format auto
                  </parse>
                </source>
                <label @FLUENT_LOG>
                  <filter fluent.**>
                    @type record_transformer
                    <record>
                      host "#{Socket.gethostname}"
                    </record>
                  </filter>
                  <match **>
                    @type forward
                    send_timeout 60s
                    recover_wait 10s
                    hard_timeout 60s
                    <server>
                      host localhost
                      port 24224
                    </server>
                  </match>
                </label>
                <match rsyslog.**>
                  @type sumologic
                  endpoint ${SumoLogicSysLogCollector}
                  log_format   json
                  source_category ${Environment}/linux/syslog
                  open_timeout 10
                  <buffer>
                    @type file
                    path /fluentd/log/rsyslog.buffer
                    flush_interval 10s
                    retry_wait 20s
                  </buffer>
                </match>
                <match fluent.**>
                  @type sumologic
                  endpoint ${SumoLogicFluentCollector}
                  log_format   json
                  source_category ${Environment}/fluent
                  open_timeout 10
                  <buffer>
                    @type file
                    path /fluentd/log/fluent.buffer
                    flush_interval 10s
                    retry_wait 20s
                  </buffer>
                </match>
                <match **>
                  @type sumologic
                  endpoint ${SumoLogicDefaultCollector}
                  log_format   json
                  source_category ${Environment}/unknown
                  open_timeout 10
                  <buffer>
                    @type file
                    path /fluentd/log/default.buffer
                    flush_interval 10s
                    retry_wait 20s
                  </buffer>
                </match>
          commands:
            run_fluentd:
              command: "docker run -d -h `hostname` -p 24224:24224 -p 5140:5140 --restart=always -e FLUENTD_CONF=fluentd.conf -v /data:/fluentd/log -v /etc/fluentd.conf:/fluentd/etc/fluentd.conf bhavikk/fluentd-sumologic:latest"
              cwd: "~"
    DependsOn:
    - LogAggregatorSecurityGroup
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      BlockDeviceMappings:
      - DeviceName: "/dev/xvda"
        Ebs:
          VolumeSize: !Ref DiskSize
          VolumeType: !Ref DiskType
      ImageId: !FindInMap [AWSRegionArch2AMI, !Ref 'AWS::Region', !FindInMap [AWSInstanceType2Arch, !Ref 'InstanceType', Arch]]
      InstanceType: !Ref InstanceType
      SecurityGroups:
      - !Ref LogAggregatorSecurityGroup
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash -xe
            yum update -y
            yum install -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LogAggLaunchConfiguration --configsets full_install --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource LogAggAutoScaleGroup --region ${AWS::Region}

  LogAggAutoScaleGroup:
    DependsOn:
    - LogAggAsgNotification
    - LogAggLaunchConfiguration
    - LogAggregatorTargetGroup
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
        Count: !Ref ClusterSize
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: !Ref ClusterSize
        PauseTime: PT10M
        WaitOnResourceSignals: true
    Properties:
      MinSize: !Ref ClusterSize
      MaxSize: 3
      DesiredCapacity: !Ref ClusterSize
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300
      LaunchConfigurationName: !Ref LogAggLaunchConfiguration
      MetricsCollection:
      - Granularity: 1Minute
      TargetGroupARNs:
      - !Ref LogAggregatorTargetGroup
      VPCZoneIdentifier:
      - !Select [0, !Split [",", "Fn::ImportValue": !Sub "${ParentVPCStack}-SubnetsPublic"]]
      - !Select [1, !Split [",", "Fn::ImportValue": !Sub "${ParentVPCStack}-SubnetsPublic"]]
      - !Select [2, !Split [",", "Fn::ImportValue": !Sub "${ParentVPCStack}-SubnetsPublic"]]
      NotificationConfigurations:
      - TopicARN:
          !Ref LogAggAsgNotification
        NotificationTypes:
        - autoscaling:EC2_INSTANCE_LAUNCH
        - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
        - autoscaling:EC2_INSTANCE_TERMINATE
        - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
      Tags:
      -
        Key: node-type
        PropagateAtLaunch: true
        Value: log-aggregator

  LogAggregatorTCPListener:
    DependsOn:
    - LogAggregatorTargetGroup
    - LogAggNetworkLoadBalancer
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref LogAggregatorTargetGroup
        Type: forward
      LoadBalancerArn: !Ref LogAggNetworkLoadBalancer
      Port: 24224
      Protocol: TCP

  LogAggregatorDNS:
    DependsOn:
    - LogAggNetworkLoadBalancer
    Type: 'AWS::Route53::RecordSet'
    Properties:
      Name: !Join ['.', ['fluent', 'Fn::ImportValue': !Sub '${ParentPrivateZoneStack}-DomainName']]
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt LogAggNetworkLoadBalancer.CanonicalHostedZoneID
        DNSName: !GetAtt LogAggNetworkLoadBalancer.DNSName
      HostedZoneId:
        'Fn::ImportValue': !Sub '${ParentPrivateZoneStack}-HostedZoneId'

Outputs:
  LogAggAsgNotificationTopic:
    Description: The ASG notification topic of log aggregators being started or terminated.
    Value: !Ref LogAggAsgNotification
  LogAggregatorDNS:
    Description: The DNS record for the log aggregator
    Value: !Ref LogAggregatorDNS
    Export:
      Name: !Sub '${AWS::StackName}-LogAggregatorDNS'

Mappings:
  # This list comes from https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes
  AWSInstanceType2Arch:
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
    t2.xlarge:
      Arch: HVM64
    t2.2xlarge:
      Arch: HVM64
    m4.large:
      Arch: HVM64
    m4.xlarge:
      Arch: HVM64
    m4.2xlarge:
      Arch: HVM64
    m4.4xlarge:
      Arch: HVM64
    m4.10xlarge:
      Arch: HVM64
    m5.large:
      Arch: HVM64
    m5.xlarge:
      Arch: HVM64
    m5.2xlarge:
      Arch: HVM64
    m5.4xlarge:
      Arch: HVM64
    m5.12xlarge:
      Arch: HVM64
    m5.24xlarge:
      Arch: HVM64
    c4.large:
      Arch: HVM64
    c4.xlarge:
      Arch: HVM64
    c4.2xlarge:
      Arch: HVM64
    c4.4xlarge:
      Arch: HVM64
    c4.8xlarge:
      Arch: HVM64
    c5.large:
      Arch: HVM64
    c5.xlarge:
      Arch: HVM64
    c5.2xlarge:
      Arch: HVM64
    c5.4xlarge:
      Arch: HVM64
    c5.9xlarge:
      Arch: HVM64
    c5.18xlarge:
      Arch: HVM64
    r4.large:
      Arch: HVM64
    r4.xlarge:
      Arch: HVM64
    r4.2xlarge:
      Arch: HVM64
    r4.4xlarge:
      Arch: HVM64
    r4.8xlarge:
      Arch: HVM64
    r4.16xlarge:
      Arch: HVM64
    x1.16xlarge:
      Arch: HVM64
    x1.32xlarge:
      Arch: HVM64
    x1e.xlarge:
      Arch: HVM64
    x1e.2xlarge:
      Arch: HVM64
    x1e.4xlarge:
      Arch: HVM64
    x1e.8xlarge:
      Arch: HVM64
    x1e.16xlarge:
      Arch: HVM64
    x1e.32xlarge:
      Arch: HVM64
    d2.xlarge:
      Arch: HVM64
    d2.2xlarge:
      Arch: HVM64
    d2.4xlarge:
      Arch: HVM64
    d2.8xlarge:
      Arch: HVM64
    h1.2xlarge:
      Arch: HVM64
    h1.4xlarge:
      Arch: HVM64
    h1.8xlarge:
      Arch: HVM64
    h1.16xlarge:
      Arch: HVM64
    i3.large:
      Arch: HVM64
    i3.xlarge:
      Arch: HVM64
    i3.2xlarge:
      Arch: HVM64
    i3.4xlarge:
      Arch: HVM64
    i3.8xlarge:
      Arch: HVM64
    i3.16xlarge:
      Arch: HVM64
    f1.2xlarge:
      Arch: HVM64
    f1.16xlarge:
      Arch: HVM64
    g3.4xlarge:
      Arch: HVM64
    g3.8xlarge:
      Arch: HVM64
    g3.16xlarge:
      Arch: HVM64
    p2.xlarge:
      Arch: HVM64
    p2.8xlarge:
      Arch: HVM64
    p2.16xlarge:
      Arch: HVM64
    p3.2xlarge:
      Arch: HVM64
    p3.8xlarge:
      Arch: HVM64
    p3.16xlarge:
      Arch: HVM64
  # This list comes from https://aws.amazon.com/amazon-linux-ami/
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-97785bed
      HVMG2: ami-0a6e3770
    us-east-2:
      HVM64: ami-f63b1193
      HVMG2: NOT_SUPPORTED
    us-west-2:
      HVM64: ami-f2d3638a
      HVMG2: ami-ee15a196
    us-west-1:
      HVM64: ami-824c4ee2
      HVMG2: ami-0da4a46d
    ca-central-1:
      HVM64: ami-a954d1cd
      HVMG2: NOT_SUPPORTED
    eu-west-1:
      HVM64: ami-d834aba1
      HVMG2: ami-af8013d6
    eu-west-2:
      HVM64: ami-403e2524
      HVMG2: NOT_SUPPORTED
    eu-west-3:
      HVM64: ami-8ee056f3
      HVMG2: NOT_SUPPORTED
    eu-central-1:
      HVM64: ami-5652ce39
      HVMG2: ami-1d58ca72
    ap-southeast-1:
      HVM64: ami-68097514
      HVMG2: ami-c06013bc
    ap-northeast-2:
      HVM64: ami-863090e8
      HVMG2: NOT_SUPPORTED
    ap-northeast-1:
      HVM64: ami-ceafcba8
      HVMG2: ami-edfd658b
    ap-southeast-2:
      HVM64: ami-942dd1f6
      HVMG2: ami-85ef12e7
    ap-south-1:
      HVM64: ami-531a4c3c
      HVMG2: ami-411e492e
    sa-east-1:
      HVM64: ami-84175ae8
      HVMG2: NOT_SUPPORTED
